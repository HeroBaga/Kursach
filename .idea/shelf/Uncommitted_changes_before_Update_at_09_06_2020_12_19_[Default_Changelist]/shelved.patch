Index: src/BackgroundChecker.java
===================================================================
--- src/BackgroundChecker.java	(revision e9ff46e4555e6f0d734d44b59a03052674034836)
+++ src/BackgroundChecker.java	(revision e9ff46e4555e6f0d734d44b59a03052674034836)
@@ -1,39 +0,0 @@
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.sql.SQLException;
-import java.util.Vector;
-
-public class BackgroundChecker implements Runnable {
-    private DataBase db = Singleton.getCollection().getDbConnection();
-
-
-    @Override
-    public void run() {
-        try {
-            boolean running = true;
-            while (running) {
-
-                int number_ready = db.numberReady();
-                if (number_ready>=2){
-                    Vector<String> playerIds = db.getplayersReady();
-                    String playerId1 = playerIds.get(0);
-                    String playerId2 = playerIds.get(1);
-                    //db.createGame(playerId1, playerId2);
-                    db.notReady(playerId1);
-                    db.leaveLobby(playerId1);
-                    db.notReady(playerId2);
-                    db.leaveLobby(playerId2);
-
-                }
-                try {
-                    Thread.sleep(1000);
-                } catch (InterruptedException e) {
-                    e.printStackTrace();
-                }
-            }
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-    }
-}
Index: src/Main.java
===================================================================
--- src/Main.java	(revision e9ff46e4555e6f0d734d44b59a03052674034836)
+++ src/Main.java	(revision e9ff46e4555e6f0d734d44b59a03052674034836)
@@ -1,59 +0,0 @@
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.net.ServerSocket;
-import java.net.Socket;
-import java.sql.SQLException;
-import java.util.*;
-
-public class Main {
-    public static void main(String[] args) throws IOException, SQLException {
-       /*
-        ServerSocket serverSocket = new ServerSocket(8082);
-
-        Socket clientSocket = serverSocket.accept();
-        Example example = new Example(clientSocket);
-        new Thread(example).start();
-        ObjectOutputStream out = new ObjectOutputStream(clientSocket.getOutputStream());
-        ObjectInputStream in = new ObjectInputStream(clientSocket.getInputStream());
-        out.writeObject("HI:");
-       */
-       /*
-       DataBase db = Singleton.getCollection().getDbConnection();
-       //db.createGame();
-
-        String[] s = db.getHistory("1").split("\\%");
-        Vector<String[]> ss = new Vector<String[]>();
-        for (int i = 0; i < s.length; i++){
-            ss.add(s[i].split("\\&"));
-        }
-        for (int i = 0; i < ss.size(); i++){
-            System.out.println(ss.get(i));
-        }*/
-       /*
-       for (int i = 0; i <20; i++){
-       System.out.println(( int)(Math.random()*6) +1);}
-
-        */
-        DataBase db = Singleton.getCollection().getDbConnection();
-        //System.out.println(db.getHistory("1"));
-        //System.out.println(db.getMyColor("85c3c60d-7c1f-417c-a3d5-2328fccef641", "43a7249b-4841-45db-a5e6-e57a8c100d96"));
-        /*HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
-        map.put(1,1);
-        int a = map.get(1);
-        map.remove(1);
-        map.put(1, a+1);
-        System.out.println(map);*/
-        //System.out.println(db.getAllTable("39c903ea-2964-465d-9de0-f343eada5ace"));
-        /*String[] colors = {"Красный", "Зеленый", "Синий", "Желтый", "Фиолетовый"};
-        List<String> newcolors = new ArrayList<String>(Arrays.asList(colors));
-        newcolors.remove("Красный");
-        colors = newcolors.toArray(new String[0]);
-        for (int i = 0; i <colors.length; i++){
-            System.out.println(colors[i]);
-        }
-        */
-        db.tryToDeleteGame("1", "1");
-
-    }
-}
Index: .idea/artifacts/Course_Work_Bogdan_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/artifacts/Course_Work_Bogdan_jar.xml	(date 1591633080840)
+++ .idea/artifacts/Course_Work_Bogdan_jar.xml	(date 1591633080840)
@@ -0,0 +1,9 @@
+<component name="ArtifactManager">
+  <artifact type="jar" name="Course_Work_Bogdan:jar">
+    <output-path>$PROJECT_DIR$/out/artifacts/Course_Work_Bogdan_jar</output-path>
+    <root id="archive" name="Course_Work_Bogdan.jar">
+      <element id="module-output" name="Course_Work_Bogdan" />
+      <element id="extracted-dir" path="$PROJECT_DIR$/lib/sqlite-jdbc-3.30.1.jar" path-in-jar="/" />
+    </root>
+  </artifact>
+</component>
\ No newline at end of file
Index: src/ServerLauncher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.io.IOException;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\nimport java.sql.SQLException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Vector;\r\n\r\npublic class ServerLauncher {\r\n\r\n    Socket clientSocket = null;\r\n    ServerSocket serverSocket = null;\r\n    ServerThread serverThread = null;\r\n    private Vector<TCPConnection> connections= new Vector<>();\r\n    private HashMap<TCPConnection,TCPConnection> helpConnections = new HashMap<>();\r\n    private DataBase db = Singleton.getCollection().getDbConnection();\r\n\r\n\r\n    public ServerLauncher() throws SQLException {\r\n        JFrame jFrame = new JFrame(\"Server\");\r\n        jFrame.setResizable(false);\r\n        jFrame.setVisible(false);\r\n        jFrame.setPreferredSize(new Dimension(300,200));\r\n        jFrame.setBounds(900,600,300,300);\r\n        jFrame.setDefaultCloseOperation(jFrame.DO_NOTHING_ON_CLOSE);\r\n\r\n        JPanel jPanel = new JPanel();\r\n\r\n        JTextArea Players = new JTextArea();\r\n        Players.setFont(new Font(\"TimesRoman\", Font.ITALIC, 14));\r\n        Players.setText(\"Текущие колличество игроков в лобби:\" + db.numberLobby());\r\n        Players.setEditable(false);\r\n        Players.setEditable(false);\r\n\r\n        JTextArea Readys = new JTextArea();\r\n        Readys.setFont(new Font(\"TimesRoman\", Font.ITALIC, 14));\r\n        Readys.setText(\"Готовые игроки:\" + db.numberReady());\r\n        Readys.setEditable(false);\r\n        Players.setEditable(false);\r\n\r\n        JButton start = new JButton(\"Запустить\");\r\n        start.setFocusable(false);\r\n//        start.setEnabled(false);\r\n\r\n        JButton stop = new JButton(\"Остановить сервер\");\r\n\r\n        stop.setFocusable(false);\r\n        stop.setEnabled(false);\r\n\r\n        JButton Refresh = new JButton(\"Обновить данные\");\r\n        Refresh.setEnabled(true);\r\n\r\n        JButton Exit = new JButton(\"Выход\");\r\n        Exit.setEnabled(true);\r\n        Exit.setFocusable(false);\r\n\r\n        Container server = jFrame.getContentPane();\r\n        server.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        jPanel.add(start);\r\n        jPanel.add(stop);\r\n        server.add(Refresh, BorderLayout.SOUTH);\r\n        server.add(Players);\r\n        server.add(Readys);\r\n        server.add(jPanel, BorderLayout.SOUTH);\r\n\r\n        server.add(Exit);\r\n        jFrame.pack();\r\n        jFrame.setVisible(true);\r\n\r\n\r\n        //Слушатели\r\n        start.addActionListener(e -> {\r\n            try {\r\n                stop.setEnabled(true);\r\n                start.setEnabled(false);\r\n                serverSocket = new ServerSocket(8081);\r\n                //bgChecker = new BackgroundChecker();\r\n                serverThread = new ServerThread(this);\r\n                //new Thread(bgChecker).start();\r\n                new Thread(serverThread).start();\r\n                Exit.setEnabled(false);\r\n                System.out.println(\"Сервер запущен\");\r\n\r\n\r\n            } catch (IOException ex) {\r\n                ex.printStackTrace();\r\n            }\r\n        });\r\n\r\n        stop.addActionListener(e -> {\r\n            try {\r\n                System.out.println(\"Сервер остановлен\");\r\n                stop.setEnabled(false);\r\n                start.setEnabled(true);\r\n                serverThread.stop();\r\n                serverSocket.close();\r\n                db.clearLobby();\r\n                db.clearReady();\r\n                db.clearGame();\r\n                db.clearHistory();\r\n                Exit.setEnabled(true);\r\n            }\r\n            catch (IOException ex) {\r\n                ex.printStackTrace();\r\n            }\r\n        });\r\n\r\n        Refresh.addActionListener(e -> {\r\n            try {\r\n                Players.setText(\"Текущие колличество игроков в лобби:\" + db.numberLobby());\r\n                Readys.setText(\"Готовые игроки:\" + db.numberReady());\r\n            } catch (SQLException ex) {\r\n                ex.printStackTrace();\r\n            }\r\n        });\r\n\r\n        Exit.addActionListener(e -> {\r\n            jFrame.dispose();\r\n            System.exit(0);\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    public class ServerThread implements Runnable {\r\n        ServerLauncher server;\r\n        boolean running = true;\r\n        ServerThread(ServerLauncher server){this.server=server;}\r\n        public void stop(){\r\n            running=false;\r\n        }\r\n        @Override\r\n        public void run() {\r\n            while(running) {\r\n                try {\r\n                    clientSocket = serverSocket.accept();\r\n                } catch (IOException e) {\r\n                    //e.printStackTrace();\r\n                    //running=false;\r\n                    break;\r\n                }\r\n                if (!running){break;}\r\n                TCPConnection client = new TCPConnection(clientSocket);\r\n                connections.add(client);\r\n                new Thread(client).start();\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ServerLauncher.java	(revision e9ff46e4555e6f0d734d44b59a03052674034836)
+++ src/ServerLauncher.java	(date 1591634798279)
@@ -123,9 +123,6 @@
 
     }
 
-
-
-
     public class ServerThread implements Runnable {
         ServerLauncher server;
         boolean running = true;
Index: src/TCPConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.IOException;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.net.Socket;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\npublic class TCPConnection implements Runnable {\r\n\r\n    private ObjectOutputStream out;\r\n    private ObjectInputStream in;\r\n    private ArrayList<String> a = new ArrayList<>();\r\n    private int Id=0;\r\n    private boolean isWork = true;\r\n    private DataBase db = Singleton.getCollection().getDbConnection();\r\n\r\n    TCPConnection(Socket socket){\r\n        try {\r\n            out= new ObjectOutputStream(socket.getOutputStream());\r\n            in = new ObjectInputStream(socket.getInputStream());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void run() {\r\n\r\n        try {\r\n            while (isWork) {\r\n                try {\r\n                    String protocol = String.valueOf(in.readObject());\r\n                    System.out.println(\"Пришло указание \"+ protocol);\r\n                    //Switch-case на ловлю запросов с клиента\r\n                    switch (protocol) {\r\n                        // Запись игрока в лобби\r\n                        case (\"enterLobby:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            db.enterLobby(uuid);\r\n                            out.writeObject(\"Ты был добавлен в лобби.\");\r\n                            break;\r\n                        }\r\n\r\n                        // Удаление игрока из готовых\r\n                        case (\"leaveLobby:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            db.leaveLobby(uuid);\r\n                            out.writeObject(\"Ты был удален из лобби.\");\r\n                            break;\r\n                        }\r\n\r\n                        // Запись игрока в готовые\r\n                        case (\"readytogame:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            db.addReady(uuid);\r\n                            out.writeObject(\"Ты сказал, что готов к игре.\");\r\n                            break;\r\n                        }\r\n\r\n                        // Удаление игрока из готовых\r\n                        case (\"notreadytogame:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            db.notReady(uuid);\r\n                            out.writeObject(\"Ты сказал, что не готов к игре.\");\r\n                            break;\r\n                        }\r\n\r\n\r\n                        // Получение кол-ва игроков в лобби\r\n                        case (\"getlobbynumber:\"):{\r\n                            int number = db.numberLobby();\r\n                            out.writeObject(String.valueOf(number));\r\n                            break;\r\n                        }\r\n\r\n                        // Получение кол-ва готовых игроков\r\n                        case (\"getreadynumber:\"):{\r\n                            int number = db.numberReady();\r\n                            out.writeObject(String.valueOf(number));\r\n                            break;\r\n                        }\r\n\r\n\r\n                        // Проверка на существование игрока в лобби\r\n                        case (\"isinlobby:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            boolean isin = db.isinLobby(uuid);\r\n                            out.writeObject(String.valueOf(isin));\r\n                            break;\r\n                        }\r\n\r\n                        // Проверка на существование игрока в готовых\r\n                        case (\"isinready:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            boolean isin = db.isinReady(uuid);\r\n                            out.writeObject(String.valueOf(isin));\r\n                            break;\r\n                        }\r\n\r\n                        // Проверка на то, находится ли игрок в игре\r\n                        case (\"isingame:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            boolean isin = db.playerInGame(uuid);\r\n                            out.writeObject(String.valueOf(isin));\r\n                            break;\r\n                        }\r\n\r\n\r\n                        // Получение ID игры в которой находится игрок\r\n                        case (\"getgameid:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            String gameid = db.getGameId(uuid);\r\n                            out.writeObject(gameid);\r\n                            break;\r\n                        }\r\n\r\n                        // Создание новой игры\r\n                        case (\"createGame:\"):{\r\n                            db.createGame();\r\n                            break;\r\n                        }\r\n\r\n                        // Запрос истории ставок\r\n                        case (\"gethistory:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            out.writeObject(db.getHistory(uuid));\r\n                            break;\r\n                        }\r\n\r\n                        // Запрос на то, какой игрок сейчас ходит\r\n                        case (\"getTurn:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            out.writeObject(db.getTurn(uuid));\r\n                            break;\r\n                        }\r\n\r\n\r\n                        // Смена хода\r\n                        case (\"changeTurn:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            db.changeTurn(uuid);\r\n                            break;\r\n                        }\r\n\r\n\r\n                        // Запрос цвета игрока\r\n                        case (\"getmycolor:\"):{\r\n                            String uuids = String.valueOf(in.readObject());\r\n                            String[] sub = uuids.split(\"\\\\$\");\r\n                            out.writeObject(db.getMyColor(sub[0], sub[1]));\r\n                            break;\r\n                        }\r\n\r\n                        // Запрос цветов игроков и их оставшихся кубиков\r\n                        case (\"getplayerscolorsanddices:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            out.writeObject(db.getPlayersColorsAndDices(uuid));\r\n                            break;\r\n                        }\r\n\r\n\r\n                        // Получение выпавшей комбинации\r\n                        case (\"getmyresult:\"):{\r\n                            String uuids = String.valueOf(in.readObject());\r\n                            String[] sub = uuids.split(\"\\\\$\");\r\n                            out.writeObject(String.valueOf(db.getMyResult(sub[0], sub[1])));\r\n                            break;\r\n                        }\r\n\r\n\r\n                        // Создание ставки\r\n                        case (\"setbet:\"):{\r\n                            String uuids = String.valueOf(in.readObject());\r\n                            String[] sub = uuids.split(\"\\\\$\");\r\n                            db.setBet(sub[0], sub[1], sub[2], sub[3]);\r\n                            break;\r\n                        }\r\n\r\n\r\n                        // Запрос последней ставки из истории\r\n                        case (\"getlastdiceandvalue:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            Object[] s = db.getLastDiceAndValue(uuid);\r\n                            out.writeObject(String.valueOf(s[1])+\"$\"+String.valueOf(s[2]));\r\n                            break;\r\n                        }\r\n\r\n\r\n                        // Была нажата кнопка Блеф\r\n                        case (\"perudo:\"):{\r\n                            String uuids = String.valueOf(in.readObject());\r\n                            String[] sub = uuids.split(\"\\\\$\");\r\n                            Object[] lastDiceAndValue = db.getLastDiceAndValue(sub[1]);\r\n                            boolean perudoTrue = isPerudoTrue(sub[1], Integer.parseInt(String.valueOf(lastDiceAndValue[1])), Integer.parseInt(String.valueOf(lastDiceAndValue[2])));\r\n                            if (perudoTrue){\r\n                                db.updateDices(String.valueOf(lastDiceAndValue[0]), sub[1]);\r\n                            }else{\r\n                                db.updateDices(sub[0], sub[1]);\r\n                            }\r\n                            db.updateResults(sub[1]);\r\n                            db.changeTurnWithPerudo(sub[0], sub[1]);\r\n                            break;\r\n                        }\r\n\r\n\r\n                        // Проверка на то, кончилась ли игра\r\n                        case (\"isgameover:\"):{\r\n                            String uuid = String.valueOf(in.readObject());\r\n                            out.writeObject(String.valueOf(db.isGameOver(uuid)));\r\n                            break;\r\n                        }\r\n\r\n\r\n                        // Игрок говорит, что он вышел из игры\r\n                        case (\"imoutofgame:\"):{\r\n                            String uuids = String.valueOf(in.readObject());\r\n                            String[] sub = uuids.split(\"\\\\$\");\r\n                            db.imOutOfGame(sub[0], sub[1]);\r\n                            break;\r\n                        }\r\n\r\n\r\n                        // Попытка удалить игру, при выходе игрока\r\n                        // Не сработает, пока в игре есть хотя бы один игрок\r\n                        case (\"trytodeletegame:\"):{\r\n                            String uuids = String.valueOf(in.readObject());\r\n                            String[] sub = uuids.split(\"\\\\$\");\r\n                            db.tryToDeleteGame(sub[0], sub[1]);\r\n                            break;\r\n                        }\r\n                        default:break;\r\n                    }\r\n                } catch (IOException | ClassNotFoundException e) {\r\n                    break;\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }finally {\r\n            try {\r\n                in.close();\r\n                out.close();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    // Проверка на то, правда ли, что игрок блефует\r\n    public boolean isPerudoTrue(String gameId, int dice, int value){\r\n        HashMap<Integer, Integer> map = db.getAllTable(gameId);\r\n        return (int) map.get(value) < dice;\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/TCPConnection.java	(revision e9ff46e4555e6f0d734d44b59a03052674034836)
+++ src/TCPConnection.java	(date 1591635149275)
@@ -24,7 +24,6 @@
         }
     }
 
-
     @Override
     public void run() {
 
Index: src/Window.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.net.Socket;\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\nimport java.util.UUID;\r\nimport java.util.Vector;\r\n\r\npublic class Window extends JPanel {\r\n    private Image image;\r\n    BufferedImage background;\r\n    String url = \"https://en.wikipedia.org/wiki/Dudo\";\r\n    int width = 1024;\r\n    int height = 680;\r\n    Socket clientSocket;\r\n    ObjectOutputStream out;\r\n    ObjectInputStream in;\r\n    User user;\r\n\r\n    JFrame jFrame = new JFrame(\"Perudo\");\r\n\r\n    public Window() throws IOException {\r\n        /*try {\r\n            image = ImageIO.read(new File(\"./src/Background.jpg\"));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        */\r\n\r\n        clientSocket = new Socket(\"localhost\", 8081);\r\n        out = new ObjectOutputStream(clientSocket.getOutputStream());\r\n        in = new ObjectInputStream(clientSocket.getInputStream());\r\n\r\n\r\n        jFrame.setVisible(true);\r\n        Toolkit toolkit = Toolkit.getDefaultToolkit();\r\n        Dimension dimension = toolkit.getScreenSize();\r\n        jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n        JPanel jPanel = new JPanel();\r\n        jPanel.setLayout(new GridLayout(1, 1, 5, 5));\r\n\r\n        JMenuBar mainMenu = new JMenuBar();\r\n        JMenu main = new JMenu(\"Приложение\");\r\n        JMenuItem Connect = new JMenuItem(\"Присоедениться\");\r\n        main.add(Connect);\r\n        JMenuItem Rules = new JMenuItem(\"Правила\");\r\n        main.add(Rules);\r\n        JMenuItem Exit = new JMenuItem(\"Выйти\");\r\n        main.add(Exit);\r\n        mainMenu.add(main);\r\n        jPanel.add(mainMenu);\r\n\r\n        Container container = jFrame.getContentPane();\r\n\r\n        jFrame.setPreferredSize(new Dimension(width, height));\r\n        jFrame.setBounds(dimension.width / 2 - width / 2, dimension.height / 2 - height / 2, width, height);\r\n        jFrame.pack();\r\n\r\n        container.add(jPanel, BorderLayout.NORTH); // Номер 0 в контейнере container (не изменять)\r\n\r\n        Rules.addActionListener(e -> {\r\n            try {\r\n                Desktop.getDesktop().browse(new URI(url));\r\n            } catch (IOException | URISyntaxException ex) {\r\n                System.err.println(\"Ошибка страницы. \" + ex.getLocalizedMessage());\r\n            }\r\n\r\n\r\n        });\r\n        Connect.addActionListener(e -> ConnectLobby(container));\r\n        Exit.addActionListener(actionEvent -> jFrame.dispose());\r\n\r\n        jFrame.setPreferredSize(new Dimension(width, height));\r\n\r\n        jFrame.setResizable(false);\r\n        jFrame.setVisible(true);\r\n\r\n\r\n    }\r\n\r\n    public void draw(Graphics g, Container field) {\r\n        g.drawImage(image, 0, 0, null);\r\n    }\r\n\r\n    public void ConnectLobby(Container container) {\r\n        //Для отрисовки\r\n        //draw(container.getGraphics(), container);\r\n\r\n        JPanel controlPanel = (JPanel) container.getComponent(0);\r\n        JMenuBar jmenubar = (JMenuBar) controlPanel.getComponent(0);\r\n        JMenu jmenu = (JMenu) jmenubar.getComponent(0);\r\n        JMenuItem connect = (JMenuItem) jmenu.getItem(0);\r\n        JTextArea Players = new JTextArea();\r\n        JTextArea Readys = new JTextArea();\r\n\r\n        System.out.println(\"HERE\");\r\n        connect.setEnabled(false);\r\n        enterLobby();\r\n        if (isInLobby()) {\r\n            JDialog PreGame = new JDialog();\r\n            PreGame.setTitle(\"Лобби\");\r\n            PreGame.setModal(true);\r\n\r\n            Players.setFont(new Font(\"TimesRoman\", Font.ITALIC, 14));\r\n\r\n            Players.setText(\"Текущие колличество игроков в лобби:\" + getLobbyNumber());\r\n            Players.setEditable(false);\r\n            Players.setEditable(false);\r\n\r\n            Readys.setFont(new Font(\"TimesRoman\", Font.ITALIC, 14));\r\n            Readys.setText(\"Готовые игроки:\" + getReadyNumber());\r\n            Readys.setEditable(false);\r\n            Players.setEditable(false);\r\n\r\n            JPanel ControlButton = new JPanel();\r\n            JPanel PlayerTypeField = new JPanel();\r\n            PlayerTypeField.setLayout(new GridLayout(2, 1, 1, 1));\r\n            PlayerTypeField.add(Players, BorderLayout.NORTH);\r\n            PlayerTypeField.add(Readys, BorderLayout.SOUTH);\r\n\r\n\r\n            JButton LeaveLobby = new JButton(\"Покинуть лобби\");\r\n            LeaveLobby.setFocusable(false);\r\n            JButton StartGame = new JButton(\"Начать игру\");\r\n            StartGame.setFocusable(false);\r\n            StartGame.setEnabled(false);\r\n            JButton Refresh = new JButton(\"Обновить лобби\");\r\n\r\n            ControlButton.add(StartGame);\r\n            ControlButton.add(LeaveLobby);\r\n\r\n            ButtonGroup group = new ButtonGroup();\r\n            JRadioButton CheckforReady = new JRadioButton(\"Я готов\", false);\r\n            JRadioButton CheckforNotReady = new JRadioButton(\"Не готов\", true);\r\n            group.add(CheckforReady);\r\n            group.add(CheckforNotReady);\r\n            CheckforNotReady.setFocusable(false);\r\n            CheckforReady.setFocusable(false);\r\n\r\n                Refresh.addActionListener(e -> {\r\n                    if (isInGame()) {\r\n                        PreGame.dispose();\r\n                        user.setgameId(getGameId());\r\n                        user.setColor(getMyColor());\r\n                        InGame(container);\r\n                    } else {\r\n                        Players.setText(\"Текущие колличество игроков в лобби:\" + getLobbyNumber());\r\n                        Readys.setText(\"Готовые игроки:\" + getReadyNumber());\r\n                    }\r\n\r\n\r\n            });\r\n\r\n            CheckforReady.addActionListener(e -> {\r\n                if (CheckforReady.isSelected()) {\r\n                    CheckforNotReady.setSelected(false);\r\n                    LeaveLobby.setEnabled(false);\r\n                    StartGame.setEnabled(true);\r\n                    readyToGame();\r\n\r\n\r\n                }\r\n            });\r\n\r\n            CheckforNotReady.addActionListener(e -> {\r\n                if (CheckforNotReady.isSelected()) {\r\n                    CheckforReady.setSelected(false);\r\n                    LeaveLobby.setEnabled(true);\r\n                    StartGame.setEnabled(false);\r\n                    notReadyToGame();\r\n                }\r\n\r\n            });\r\n\r\n            LeaveLobby.addActionListener(e -> {\r\n                leaveLobby();\r\n                PreGame.dispose();\r\n            });\r\n\r\n            StartGame.addActionListener(e -> {\r\n                if (!isInGame()) {\r\n                    if (getLobbyNumber() == getReadyNumber() && getReadyNumber() >= 3) {\r\n                        createGame();\r\n                        PreGame.dispose();\r\n                        user.setgameId(getGameId());\r\n                        user.setColor(getMyColor());\r\n                        InGame(container);\r\n                    } else {\r\n                        JDialog WaitError = new JDialog();\r\n                        WaitError.setTitle(\"Error\");\r\n                        WaitError.setModal(true);\r\n                        WaitError.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                        JTextArea WaitErrorArea = new JTextArea();\r\n                        WaitErrorArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                        WaitErrorArea.setText(\"Минимальное количество игроков для игры 3\");\r\n                        WaitErrorArea.setEditable(false);\r\n                        Container errorContentPane = WaitError.getContentPane();\r\n                        errorContentPane.add(WaitErrorArea);\r\n                        WaitError.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                        WaitError.setResizable(false);\r\n                        WaitError.pack();\r\n                        WaitError.setVisible(true);\r\n                    }\r\n\r\n                } else {\r\n                    JDialog WaitError = new JDialog();\r\n                    WaitError.setTitle(\"Error\");\r\n                    WaitError.setModal(true);\r\n                    WaitError.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                    JTextArea WaitErrorArea = new JTextArea();\r\n                    WaitErrorArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                    WaitErrorArea.setText(\"Вы уже находитесь в игре, нажмите кнопку обновить, чтобы войти в игру.\");\r\n                    WaitErrorArea.setEditable(false);\r\n                    Container errorContentPane = WaitError.getContentPane();\r\n                    errorContentPane.add(WaitErrorArea);\r\n                    WaitError.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                    WaitError.setResizable(false);\r\n                    WaitError.pack();\r\n                    WaitError.setVisible(true);\r\n                }\r\n\r\n            });\r\n\r\n            JPanel LobbyPanel = new JPanel();\r\n            LobbyPanel.add(CheckforReady);\r\n            LobbyPanel.add(CheckforNotReady);\r\n            LobbyPanel.add(Refresh);\r\n            Container temp = PreGame.getContentPane();\r\n            temp.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n            temp.add(PlayerTypeField, BorderLayout.CENTER);\r\n            temp.add(Refresh, BorderLayout.PAGE_END);\r\n            temp.add(LobbyPanel, BorderLayout.PAGE_END);\r\n            temp.add(ControlButton, BorderLayout.PAGE_END);\r\n            PreGame.setResizable(false);\r\n            PreGame.setPreferredSize(new Dimension(350, 170));\r\n            PreGame.setBounds(700, 400, 350, 170);\r\n            PreGame.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\r\n            PreGame.pack();\r\n            PreGame.setVisible(true);\r\n        }\r\n\r\n        if (!isInLobby() && !isInGame()) {\r\n            connect.setEnabled(true);\r\n\r\n        }\r\n    }\r\n\r\n    public void InGame(Container container) {\r\n        JPanel controlPanel = (JPanel) container.getComponent(0);\r\n        JMenuBar jmenubar = (JMenuBar) controlPanel.getComponent(0);\r\n        JMenu jmenu = (JMenu) jmenubar.getComponent(0);\r\n        JMenuItem connect = (JMenuItem) jmenu.getItem(0);\r\n\r\n        //Ниже создаётся диалоговое окно для того чтоб загадать число противнику\r\n        //Вроде не нужно, но я не уверен\r\n        /*\r\n        JDialog MakeNumber = new JDialog();\r\n        MakeNumber.setTitle(\"Загадай число\");\r\n        MakeNumber.setModal(true);\r\n        MakeNumber.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\r\n        JTextArea numbercheckarea = new JTextArea(\"Загадай число от 1234 до 9876 без повторений цифр\");\r\n        numbercheckarea.setEditable(false);\r\n        TextField numbercheckfield = new TextField(\"\", 10);\r\n        JButton numbercheckbutton = new JButton(\"Загадать число\");\r\n\r\n        //Слушатель на кнопку Загадать число\r\n        numbercheckbutton.addActionListener(e -> {\r\n            int number;\r\n            try {\r\n                number = Integer.parseInt(numbercheckfield.getText());\r\n                if (number >= 1234) {\r\n                    if (number <= 9876) {\r\n                        int first = (int) number / 1000;\r\n                        int second = (int) ((number / 100) % 10);\r\n                        int third = (int) ((number / 10) % 10);\r\n                        int forth = number % 10;\r\n                        if (first != second && first != third && first != forth && second != third && second != forth && third != forth) {\r\n                            makeNumber(number);\r\n                            MakeNumber.dispose();\r\n                        } else throw new NumberFormatException();\r\n                    } else throw new NumberFormatException();\r\n                } else throw new NumberFormatException();\r\n            } catch (NumberFormatException nfe) {\r\n\r\n                JDialog error = new JDialog();\r\n                error.setTitle(\"Error\");\r\n                error.setModal(true);\r\n                error.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                JTextArea textArea = new JTextArea();\r\n                textArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                textArea.setText(\"Указанно неверное чилсло. Число должно быть в диапазоне от 1234 до 9876 и числа не должны повторяться\");\r\n                textArea.setEditable(false);\r\n                Container errorContentPane = error.getContentPane();\r\n                errorContentPane.add(textArea);\r\n                error.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                error.setResizable(false);\r\n                error.pack();\r\n                error.setVisible(true);\r\n            }\r\n        });\r\n\r\n        Container container2 = MakeNumber.getContentPane();\r\n        container2.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        container2.add(numbercheckarea);\r\n        container2.add(numbercheckfield);\r\n        container2.add(numbercheckbutton);\r\n        MakeNumber.setPreferredSize(new Dimension(390, 130));\r\n        MakeNumber.setBounds(700, 400, 100, 100);\r\n        MakeNumber.setResizable(false);\r\n        MakeNumber.pack();\r\n        MakeNumber.setVisible(true);\r\n\r\n         */\r\n\r\n        //Создание игрового поля\r\n        JPanel TheTable = new JPanel();\r\n        TheTable.update(getGraphics());\r\n        TheTable.revalidate();\r\n        TheTable.repaint();\r\n        jFrame.revalidate();\r\n        jFrame.repaint();\r\n\r\n        final int[] n = {1}; // счётчик для отправленных чисел\r\n\r\n        TheTable.setLayout(new GridLayout(3, 3, 5, 5));\r\n        JLabel Players = new JLabel(\"Игроки\");\r\n        JLabel Table = new JLabel(\"Стол\");\r\n        JLabel History = new JLabel(\"История\");\r\n\r\n        JTextArea CurrentDice = new JTextArea(\"\", 20, 10);\r\n        CurrentDice.setEditable(false);\r\n        CurrentDice.setFocusable(false);\r\n        CurrentDice.setLineWrap(true);\r\n        JScrollPane CurrentDicePane = new JScrollPane(CurrentDice);\r\n\r\n        String playersColorsAndDices = getPlayersColorsAndDices();\r\n\r\n        Vector<String[]> vectorColorsDices = new Vector<String[]>();\r\n        String[] s_playersColorsDices = playersColorsAndDices.split(\"\\\\%\");\r\n        for (int i = 0; i < s_playersColorsDices.length; i++) {\r\n            vectorColorsDices.add(s_playersColorsDices[i].split(\"\\\\$\"));\r\n        }\r\n        String text_for_CurrentDice = \"\";\r\n        for (int i = 0; i < vectorColorsDices.size(); i++) {\r\n            text_for_CurrentDice += vectorColorsDices.get(i)[0] + \" - \" + vectorColorsDices.get(i)[1] + \"\\n\";\r\n        }\r\n        CurrentDice.setText(text_for_CurrentDice);\r\n\r\n\r\n        JLabel UrColor = new JLabel(\"Ваш цвет - \" + user.getColor());\r\n\r\n        JTextArea HistoryArea = new JTextArea(\"\", 20, 10);\r\n        HistoryArea.setEditable(false);\r\n        HistoryArea.setFocusable(false);\r\n        HistoryArea.setLineWrap(true);\r\n        JScrollPane HistoryAreaPane = new JScrollPane(HistoryArea);\r\n\r\n\r\n        JButton ExitGame = new JButton(\"Покинуть игру\");\r\n\r\n        JPanel Dices = new JPanel();\r\n        JLabel UrDice = new JLabel(\"Ваши кубики\");\r\n        JTextArea FirstDice = new JTextArea(\"\", 1, 1);\r\n        JTextArea SecondDice = new JTextArea(\"\", 1, 1);\r\n        JTextArea ThirdDice = new JTextArea(\"\", 1, 1);\r\n        JTextArea FourthDice = new JTextArea(\"\", 1, 1);\r\n        JTextArea FifthDice = new JTextArea(\"\", 1, 1);\r\n        FirstDice.setEditable(false);\r\n        FirstDice.setEditable(false);\r\n        SecondDice.setEditable(false);\r\n        SecondDice.setEditable(false);\r\n        ThirdDice.setEditable(false);\r\n        ThirdDice.setFocusable(false);\r\n        FourthDice.setFocusable(false);\r\n        FourthDice.setFocusable(false);\r\n        FifthDice.setFocusable(false);\r\n        FifthDice.setFocusable(false);\r\n        Dices.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        Dices.add(UrDice);\r\n        Dices.add(FirstDice);\r\n        Dices.add(SecondDice);\r\n        Dices.add(ThirdDice);\r\n        Dices.add(FourthDice);\r\n        Dices.add(FifthDice);\r\n\r\n        int myResult = getMyResult();\r\n        String myResultString = String.valueOf(myResult);\r\n        char[] myResultStringArray = myResultString.toCharArray();\r\n        JTextArea[] dicesAreas = {FirstDice, SecondDice, ThirdDice, FourthDice, FifthDice};\r\n        for (int i = 0; i < myResultString.length(); i++) {\r\n            dicesAreas[i].setText(String.valueOf(myResultStringArray[i]));\r\n        }\r\n\r\n        JPanel ControlBet = new JPanel();\r\n        JPanel Bets = new JPanel();\r\n        String[] turn = getTurn();\r\n        String color = \"\";\r\n\r\n        if (turn[0].equals(user.getUuid())) {\r\n            color = \"Ваш ход\";\r\n        } else {\r\n            color = \"Ходит \" + turn[1];\r\n        }\r\n\r\n        JTextArea StatusArea = new JTextArea(color, 1, 10);\r\n        StatusArea.setEditable(false);\r\n        StatusArea.setFocusable(false);\r\n        JButton Perudo = new JButton(\"Блеф\");\r\n        TextField DiceValue = new TextField(\"\", 1);    //Значение на кубике\r\n        TextField NumberOfDice = new TextField(\"\", 3); //Количество кубиков\r\n        DiceValue.setEditable(true);\r\n        NumberOfDice.setEditable(true);\r\n        DiceValue.setFocusable(true);\r\n        NumberOfDice.setFocusable(true);\r\n        Perudo.setEnabled(false);\r\n        JButton SetBet = new JButton(\"Сделать ставку\");\r\n        SetBet.setEnabled(false);\r\n        JButton RefreshGame = new JButton(\"Обновить историю\");\r\n\r\n        if (color.equals(\"Ваш ход\")) {\r\n            Bets.setEnabled(true);\r\n            DiceValue.setEditable(true);\r\n            NumberOfDice.setEditable(true);\r\n            SetBet.setEnabled(true);\r\n            Perudo.setEnabled(true);\r\n        }\r\n\r\n        Bets.setLayout(new FlowLayout(FlowLayout.TRAILING));\r\n        Bets.add(DiceValue);\r\n        Bets.add(NumberOfDice);\r\n        Bets.add(SetBet);\r\n\r\n        ControlBet.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        ControlBet.add(StatusArea);\r\n        ControlBet.add(RefreshGame);\r\n        ControlBet.add(Perudo);\r\n        ControlBet.add(Bets);\r\n\r\n        TheTable.add(Players);\r\n        TheTable.add(Table);\r\n        TheTable.add(History);\r\n        TheTable.add(CurrentDicePane);\r\n        TheTable.add(UrColor);\r\n        TheTable.add(UrColor);\r\n        TheTable.add(HistoryAreaPane);\r\n        TheTable.add(ExitGame);\r\n        TheTable.add(Dices);\r\n        TheTable.add(ControlBet);\r\n\r\n        //Слушатели кнопок\r\n        ExitGame.addActionListener(e -> {\r\n            JDialog ExitDialog = new JDialog();\r\n            ExitDialog.setTitle(\"Выход из игры\");\r\n            ExitDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\r\n            ExitDialog.setModal(true);\r\n            JTextArea textArea = new JTextArea();\r\n            textArea.setFont(new Font(\"TimesRoman\", Font.BOLD, 14));\r\n            textArea.setText(\"Вы уверены, что хотите покинуть игру?\");\r\n            textArea.setEditable(false);\r\n            JButton OK = new JButton(\"Да\");\r\n            JButton cancel = new JButton(\"Отмена\");\r\n\r\n            OK.addActionListener(ex -> {\r\n                StatusArea.setText(\"Вы покинули игру\");\r\n                connect.setEnabled(true);\r\n                TheTable.removeAll();\r\n                container.remove(1);\r\n                jFrame.revalidate();\r\n                jFrame.requestFocus();\r\n                jFrame.pack();\r\n                ExitDialog.dispose();\r\n                imOutOfGame();\r\n                tryToDeleteGame();\r\n            });\r\n\r\n            cancel.addActionListener(ex -> {\r\n                ExitDialog.dispose();\r\n            });\r\n\r\n            JPanel panel = new JPanel();\r\n            panel.add(OK);\r\n            panel.add(cancel);\r\n            Container container1 = ExitDialog.getContentPane();\r\n            container1.add(textArea);\r\n            container1.add(panel);\r\n            ExitDialog.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n            ExitDialog.pack();\r\n            ExitDialog.setVisible(true);\r\n        });\r\n\r\n        RefreshGame.addActionListener(e -> {\r\n            Vector<String[]> history = getHistory();\r\n            String text = \"\";\r\n            if (!history.get(0)[0].equals(\"\")) {\r\n                for (int i = 0; i < history.size(); i++) {\r\n                    String[] s = history.get(i);\r\n                    if (s[1].equals(\"-1\") && s[2].equals(\"-1\")) {\r\n                        text += \"Игрок \" + s[3] + \" оспорил ставку\" + \"\\n\" + \"Начался новый раунд\\n\";\r\n\r\n                    } else {\r\n                        text += \"Игрок \" + s[3] + \" делает ставку: \" + s[2] + \" количеством \"  + s[1] + \"\\n\";\r\n                    }\r\n                }\r\n            } else {\r\n                text = \"\";\r\n            }\r\n            HistoryArea.setText(text);\r\n\r\n            String[] turn2 = getTurn();\r\n            String color2 = \"\";\r\n            if (turn2[0].equals(user.getUuid())) {\r\n                color2 = \"Ваш ход\";\r\n                Bets.setEnabled(true);\r\n                SetBet.setEnabled(true);\r\n                DiceValue.setEditable(true);\r\n                NumberOfDice.setEditable(true);\r\n                //TODO протестить залочивание кнопки блеф при новом раунде\r\n                if (!getLastDiceAndValue()[0].equals(\"-1\") && !getLastDiceAndValue()[1].equals(\"-1\")){\r\n                    Perudo.setEnabled(true);\r\n                } else{\r\n                    Perudo.setEnabled(false);\r\n                }\r\n                Bets.revalidate();\r\n\r\n\r\n            } else {\r\n                color2 = \"Ходит \" + turn2[1];\r\n                Bets.setEnabled(false);\r\n                SetBet.setEnabled(false);\r\n                DiceValue.setEditable(false);\r\n                NumberOfDice.setEditable(false);\r\n                Perudo.setEnabled(false);\r\n                Bets.revalidate();\r\n            }\r\n            StatusArea.setText(color2);\r\n            String playersColorsAndDices2 = getPlayersColorsAndDices();\r\n            Vector<String[]> vectorColorsDices2 = new Vector<String[]>();\r\n            String[] s_playersColorsDices2 = playersColorsAndDices2.split(\"\\\\%\");\r\n            for (int i = 0; i < s_playersColorsDices2.length; i++) {\r\n                vectorColorsDices2.add(s_playersColorsDices2[i].split(\"\\\\$\"));\r\n            }\r\n            String text_for_CurrentDice2 = \"\";\r\n            for (int i = 0; i < vectorColorsDices2.size(); i++) {\r\n                text_for_CurrentDice2 += vectorColorsDices2.get(i)[0] + \" - \" + vectorColorsDices2.get(i)[1] + \"\\n\";\r\n            }\r\n            CurrentDice.setText(text_for_CurrentDice2);\r\n            int myResult2 = getMyResult();\r\n            String myResultString2 = String.valueOf(myResult2);\r\n            char[] myResultStringArray2 = myResultString2.toCharArray();\r\n            JTextArea[] dicesAreas2 = {FirstDice, SecondDice, ThirdDice, FourthDice, FifthDice};\r\n            for (int i = 0; i <dicesAreas2.length; i++){\r\n                dicesAreas2[i].setText(\"\");\r\n            }\r\n            for (int i = 0; i < myResultString2.length(); i++) {\r\n                dicesAreas2[i].setText(String.valueOf(myResultStringArray2[i]));\r\n            }\r\n            for (int i = 0; i < vectorColorsDices2.size(); i++) {\r\n                if (user.getColor().equals(vectorColorsDices2.get(i)[0]) && vectorColorsDices2.get(i)[1].equals(\"0\")){\r\n                    for (int j = 0; j <dicesAreas2.length; j++){\r\n                        dicesAreas2[j].setText(\"\");\r\n                    }\r\n                    StatusArea.setText(\"Вы проиграли\");\r\n                    Bets.setEnabled(false);\r\n                    SetBet.setEnabled(false);\r\n                    DiceValue.setEditable(false);\r\n                    NumberOfDice.setEditable(false);\r\n                    Perudo.setEnabled(false);\r\n                    Bets.revalidate();\r\n\r\n                }\r\n            }\r\n            if (isGameOver()){\r\n                for (int i = 0; i < vectorColorsDices2.size(); i++) {\r\n                    if (user.getColor().equals(vectorColorsDices2.get(i)[0]) && !vectorColorsDices2.get(i)[1].equals(\"0\")){\r\n                        for (int j = 0; j <dicesAreas2.length; j++){\r\n                            dicesAreas2[j].setText(\"\");\r\n                        }\r\n                        StatusArea.setText(\"Вы выиграли\");\r\n                        Bets.setEnabled(false);\r\n                        SetBet.setEnabled(false);\r\n                        DiceValue.setEditable(false);\r\n                        NumberOfDice.setEditable(false);\r\n                        Perudo.setEnabled(false);\r\n                        Bets.revalidate();\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        Perudo.addActionListener(e -> {\r\n\r\n            perudo();\r\n            setBet(\"-1\", \"-1\");\r\n\r\n            //TODO дубликат refresh\r\n            Vector<String[]> history = getHistory();\r\n            String text = \"\";\r\n            if (!history.get(0)[0].equals(\"\")) {\r\n                for (int i = 0; i < history.size(); i++) {\r\n                    String[] s = history.get(i);\r\n                    if (s[1].equals(\"-1\") && s[2].equals(\"-1\")) {\r\n                        text += \"Игрок \" + s[3] + \" оспорил ставку\" + \"\\n\" + \"Начался новый раунд\\n\";\r\n\r\n                    } else {\r\n                        text += \"Игрок \" + s[3] + \" делает ставку: \" + s[2] + \" количеством \"  + s[1] + \"\\n\";\r\n                    }\r\n                }\r\n            } else {\r\n                text = \"\";\r\n            }\r\n            HistoryArea.setText(text);\r\n\r\n            String[] turn2 = getTurn();\r\n            String color2 = \"\";\r\n            if (turn2[0].equals(user.getUuid())) {\r\n                color2 = \"Ваш ход\";\r\n                Bets.setEnabled(true);\r\n                SetBet.setEnabled(true);\r\n                DiceValue.setEditable(true);\r\n                NumberOfDice.setEditable(true);\r\n                Perudo.setEnabled(true);\r\n                Bets.revalidate();\r\n\r\n\r\n            } else {\r\n                color2 = \"Ходит \" + turn2[1];\r\n                Bets.setEnabled(false);\r\n                SetBet.setEnabled(false);\r\n                DiceValue.setEditable(false);\r\n                NumberOfDice.setEditable(false);\r\n                Perudo.setEnabled(false);\r\n                Bets.revalidate();\r\n            }\r\n            StatusArea.setText(color2);\r\n            String playersColorsAndDices2 = getPlayersColorsAndDices();\r\n            Vector<String[]> vectorColorsDices2 = new Vector<String[]>();\r\n            String[] s_playersColorsDices2 = playersColorsAndDices2.split(\"\\\\%\");\r\n            for (int i = 0; i < s_playersColorsDices2.length; i++) {\r\n                vectorColorsDices2.add(s_playersColorsDices2[i].split(\"\\\\$\"));\r\n            }\r\n            String text_for_CurrentDice2 = \"\";\r\n            for (int i = 0; i < vectorColorsDices2.size(); i++) {\r\n                text_for_CurrentDice2 += vectorColorsDices2.get(i)[0] + \" - \" + vectorColorsDices2.get(i)[1] + \"\\n\";\r\n            }\r\n            CurrentDice.setText(text_for_CurrentDice2);\r\n            int myResult2 = getMyResult();\r\n            String myResultString2 = String.valueOf(myResult2);\r\n            char[] myResultStringArray2 = myResultString2.toCharArray();\r\n            JTextArea[] dicesAreas2 = {FirstDice, SecondDice, ThirdDice, FourthDice, FifthDice};\r\n            for (int i = 0; i <dicesAreas2.length; i++){\r\n                dicesAreas2[i].setText(\"\");\r\n            }\r\n            for (int i = 0; i < myResultString2.length(); i++) {\r\n                dicesAreas2[i].setText(String.valueOf(myResultStringArray2[i]));\r\n            }\r\n            for (int i = 0; i < vectorColorsDices2.size(); i++) {\r\n                if (user.getColor().equals(vectorColorsDices2.get(i)[0]) && vectorColorsDices2.get(i)[1].equals(\"0\")){\r\n                    for (int j = 0; j <dicesAreas2.length; j++){\r\n                        dicesAreas2[j].setText(\"\");\r\n                    }\r\n                    StatusArea.setText(\"Вы проиграли\");\r\n                    Bets.setEnabled(false);\r\n                    SetBet.setEnabled(false);\r\n                    DiceValue.setEditable(false);\r\n                    NumberOfDice.setEditable(false);\r\n                    Perudo.setEnabled(false);\r\n                    Bets.revalidate();\r\n\r\n                }\r\n            }\r\n            if (isGameOver()){\r\n                for (int i = 0; i < vectorColorsDices2.size(); i++) {\r\n                    if (user.getColor().equals(vectorColorsDices2.get(i)[0]) && !vectorColorsDices2.get(i)[1].equals(\"0\")){\r\n                        for (int j = 0; j <dicesAreas2.length; j++){\r\n                            dicesAreas2[j].setText(\"\");\r\n                        }\r\n                        StatusArea.setText(\"Вы выиграли\");\r\n                        Bets.setEnabled(false);\r\n                        SetBet.setEnabled(false);\r\n                        DiceValue.setEditable(false);\r\n                        NumberOfDice.setEditable(false);\r\n                        Perudo.setEnabled(false);\r\n                        Bets.revalidate();\r\n\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        SetBet.addActionListener(e -> {\r\n            if (Integer.parseInt(DiceValue.getText()) >= 1 && Integer.parseInt(DiceValue.getText()) <= 6) {\r\n                if (Integer.parseInt(NumberOfDice.getText()) > 0) {\r\n                    String[] lastDiceAndValue = getLastDiceAndValue();\r\n                    int lastDice = Integer.parseInt(lastDiceAndValue[0]); // значение предыдущей ставки\r\n                    int lastValue = Integer.parseInt(lastDiceAndValue[1]); // кол-во предыдущей ставки\r\n                    //значение предыдущей ставки - s[1]\r\n                    //кол-во предыдущей ставки - s[0]\r\n\r\n                    //Проверка на предыдущую ставку блеф или нет\r\n                    if (!lastDiceAndValue[0].equals(\"-1\") && !lastDiceAndValue[1].equals(\"-1\")){\r\n                        //Проверка на ставку Джокер или обычная кость\r\n\r\n                        if(Integer.parseInt(DiceValue.getText()) == lastValue){\r\n                            if (Integer.parseInt(NumberOfDice.getText()) > lastDice){\r\n                                SetBet.setEnabled(false);\r\n                                Perudo.setEnabled(false);\r\n                                setBet(NumberOfDice.getText(), DiceValue.getText());\r\n                                changeTurn();\r\n                                DiceValue.setText(\"\");\r\n                                NumberOfDice.setText(\"\");\r\n                            }else{\r\n                                //Окно ошибки, что значение должно быть больше предыдущей ставки\r\n                                JDialog error = new JDialog();\r\n                                error.setTitle(\"Ошибка\");\r\n                                error.setModal(true);\r\n                                error.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                                JTextArea textArea = new JTextArea();\r\n                                textArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                                textArea.setText(\"Значение должно быть больше предыдущей ставки\");\r\n                                DiceValue.setText(\"\");\r\n                                textArea.setEditable(false);\r\n                                Container errorContentPane = error.getContentPane();\r\n                                errorContentPane.add(textArea);\r\n                                error.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                                error.setResizable(false);\r\n                                error.pack();\r\n                                error.setVisible(true);\r\n                            }\r\n                        }else{\r\n                            if (lastValue == 1) {\r\n                                if (Integer.parseInt(NumberOfDice.getText()) >= (int)(lastDice*2 + 1)){\r\n                                    SetBet.setEnabled(false);\r\n                                    Perudo.setEnabled(false);\r\n                                    setBet(NumberOfDice.getText(), DiceValue.getText());\r\n                                    changeTurn();\r\n                                    DiceValue.setText(\"\");\r\n                                    NumberOfDice.setText(\"\");\r\n                                }else{\r\n                                    //Окно ошибки, что значение должно быть больше предыдущей в два раза + 1\r\n                                    JDialog error = new JDialog();\r\n                                    error.setTitle(\"Ошибка\");\r\n                                    error.setModal(true);\r\n                                    error.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                                    JTextArea textArea = new JTextArea();\r\n                                    textArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                                    textArea.setText(\"Значение должно быть больше предыдущей в два раза + 1\");\r\n                                    DiceValue.setText(\"\");\r\n                                    textArea.setEditable(false);\r\n                                    Container errorContentPane = error.getContentPane();\r\n                                    errorContentPane.add(textArea);\r\n                                    error.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                                    error.setResizable(false);\r\n                                    error.pack();\r\n                                    error.setVisible(true);\r\n                                }\r\n                            } else {\r\n                                if (Integer.parseInt(DiceValue.getText()) == 1){\r\n                                    if (Integer.parseInt(NumberOfDice.getText()) >= (int)(lastDice/2 + 0.5)){\r\n                                        SetBet.setEnabled(false);\r\n                                        Perudo.setEnabled(false);\r\n                                        setBet(NumberOfDice.getText(), DiceValue.getText());\r\n                                        changeTurn();\r\n                                        DiceValue.setText(\"\");\r\n                                        NumberOfDice.setText(\"\");\r\n                                    }else{\r\n                                        //Окно ошибки, что значение должно быть больше половины c округлением в большую сторону\r\n                                        JDialog error = new JDialog();\r\n                                        error.setTitle(\"Ошибка\");\r\n                                        error.setModal(true);\r\n                                        error.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                                        JTextArea textArea = new JTextArea();\r\n                                        textArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                                        textArea.setText(\"Значение должно быть больше половины c округлением в большую сторону\");\r\n                                        DiceValue.setText(\"\");\r\n                                        textArea.setEditable(false);\r\n                                        Container errorContentPane = error.getContentPane();\r\n                                        errorContentPane.add(textArea);\r\n                                        error.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                                        error.setResizable(false);\r\n                                        error.pack();\r\n                                        error.setVisible(true);\r\n                                    }\r\n                                } else{\r\n                                    if (Integer.parseInt(NumberOfDice.getText()) >=  lastDice){\r\n                                        SetBet.setEnabled(false);\r\n                                        Perudo.setEnabled(false);\r\n                                        setBet(NumberOfDice.getText(), DiceValue.getText());\r\n                                        changeTurn();\r\n                                        DiceValue.setText(\"\");\r\n                                        NumberOfDice.setText(\"\");\r\n                                    }else{\r\n                                        //Окно ошибки, что значение должно быть больше предыдущей ставки\r\n                                        JDialog error = new JDialog();\r\n                                        error.setTitle(\"Ошибка\");\r\n                                        error.setModal(true);\r\n                                        error.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                                        JTextArea textArea = new JTextArea();\r\n                                        textArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                                        textArea.setText(\"Значение должно быть больше предыдущей ставки.\");\r\n                                        DiceValue.setText(\"\");\r\n                                        textArea.setEditable(false);\r\n                                        Container errorContentPane = error.getContentPane();\r\n                                        errorContentPane.add(textArea);\r\n                                        error.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                                        error.setResizable(false);\r\n                                        error.pack();\r\n                                        error.setVisible(true);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }else{\r\n                        SetBet.setEnabled(false);\r\n                        Perudo.setEnabled(false);\r\n                        setBet(NumberOfDice.getText(), DiceValue.getText());\r\n                        changeTurn();\r\n                        DiceValue.setText(\"\");\r\n                        NumberOfDice.setText(\"\");\r\n                    }\r\n\r\n                }else{JDialog error = new JDialog();\r\n                    error.setTitle(\"Ошибка\");\r\n                    error.setModal(true);\r\n                    error.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                    JTextArea textArea = new JTextArea();\r\n                    textArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                    textArea.setText(\"Количество кубиков должно быть > 0\");\r\n                    NumberOfDice.setText(\"\");\r\n                    textArea.setEditable(false);\r\n                    Container errorContentPane = error.getContentPane();\r\n                    errorContentPane.add(textArea);\r\n                    error.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                    error.setResizable(false);\r\n                    error.pack();\r\n                    error.setVisible(true);\r\n\r\n                }\r\n            } else {\r\n                JDialog error = new JDialog();\r\n                error.setTitle(\"Ошибка\");\r\n                error.setModal(true);\r\n                error.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                JTextArea textArea = new JTextArea();\r\n                textArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                textArea.setText(\"Введён неверный номинал кубика\");\r\n                DiceValue.setText(\"\");\r\n                textArea.setEditable(false);\r\n                Container errorContentPane = error.getContentPane();\r\n                errorContentPane.add(textArea);\r\n                error.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                error.setResizable(false);\r\n                error.pack();\r\n                error.setVisible(true);\r\n            }\r\n\r\n            //TODO дубликат refresh\r\n            Vector<String[]> history = getHistory();\r\n            String text = \"\";\r\n            if (!history.get(0)[0].equals(\"\")) {\r\n                for (int i = 0; i < history.size(); i++) {\r\n                    String[] s = history.get(i);\r\n                    if (s[1].equals(\"-1\") && s[2].equals(\"-1\")) {\r\n                        text += \"Игрок \" + s[3] + \" оспорил ставку\" + \"\\n\" + \"Начался новый раунд\\n\";\r\n\r\n                    } else {\r\n                        text += \"Игрок \" + s[3] + \" делает ставку: \" + s[2] + \" количеством \"  + s[1] + \"\\n\";\r\n                    }\r\n                }\r\n            } else {\r\n                text = \"\";\r\n            }\r\n            HistoryArea.setText(text);\r\n\r\n            String[] turn2 = getTurn();\r\n            String color2 = \"\";\r\n            if (turn2[0].equals(user.getUuid())) {\r\n                color2 = \"Ваш ход\";\r\n                Bets.setEnabled(true);\r\n                SetBet.setEnabled(true);\r\n                DiceValue.setEditable(true);\r\n                NumberOfDice.setEditable(true);\r\n                Perudo.setEnabled(true);\r\n                Bets.revalidate();\r\n\r\n\r\n            } else {\r\n                color2 = \"Ходит \" + turn2[1];\r\n                Bets.setEnabled(false);\r\n                SetBet.setEnabled(false);\r\n                DiceValue.setEditable(false);\r\n                NumberOfDice.setEditable(false);\r\n                Perudo.setEnabled(false);\r\n                Bets.revalidate();\r\n            }\r\n            StatusArea.setText(color2);\r\n            String playersColorsAndDices2 = getPlayersColorsAndDices();\r\n            Vector<String[]> vectorColorsDices2 = new Vector<String[]>();\r\n            String[] s_playersColorsDices2 = playersColorsAndDices2.split(\"\\\\%\");\r\n            for (int i = 0; i < s_playersColorsDices2.length; i++) {\r\n                vectorColorsDices2.add(s_playersColorsDices2[i].split(\"\\\\$\"));\r\n            }\r\n            String text_for_CurrentDice2 = \"\";\r\n            for (int i = 0; i < vectorColorsDices2.size(); i++) {\r\n                text_for_CurrentDice2 += vectorColorsDices2.get(i)[0] + \" - \" + vectorColorsDices2.get(i)[1] + \"\\n\";\r\n            }\r\n            CurrentDice.setText(text_for_CurrentDice2);\r\n            int myResult2 = getMyResult();\r\n            String myResultString2 = String.valueOf(myResult2);\r\n            char[] myResultStringArray2 = myResultString2.toCharArray();\r\n            JTextArea[] dicesAreas2 = {FirstDice, SecondDice, ThirdDice, FourthDice, FifthDice};\r\n            for (int i = 0; i <dicesAreas2.length; i++){\r\n                dicesAreas2[i].setText(\"\");\r\n            }\r\n            for (int i = 0; i < myResultString2.length(); i++) {\r\n                dicesAreas2[i].setText(String.valueOf(myResultStringArray2[i]));\r\n            }\r\n            for (int i = 0; i < vectorColorsDices2.size(); i++) {\r\n                if (user.getColor().equals(vectorColorsDices2.get(i)[0]) && vectorColorsDices2.get(i)[1].equals(\"0\")){\r\n                    for (int j = 0; j <dicesAreas2.length; j++){\r\n                        dicesAreas2[j].setText(\"\");\r\n                    }\r\n                    StatusArea.setText(\"Вы проиграли\");\r\n                    Bets.setEnabled(false);\r\n                    SetBet.setEnabled(false);\r\n                    DiceValue.setEditable(false);\r\n                    NumberOfDice.setEditable(false);\r\n                    Perudo.setEnabled(false);\r\n                    Bets.revalidate();\r\n\r\n                }\r\n            }\r\n            if (isGameOver()){\r\n                for (int i = 0; i < vectorColorsDices2.size(); i++) {\r\n                    if (user.getColor().equals(vectorColorsDices2.get(i)[0]) && !vectorColorsDices2.get(i)[1].equals(\"0\")){\r\n                        for (int j = 0; j <dicesAreas2.length; j++){\r\n                            dicesAreas2[j].setText(\"\");\r\n                        }\r\n                        StatusArea.setText(\"Вы выиграли\");\r\n                        Bets.setEnabled(false);\r\n                        SetBet.setEnabled(false);\r\n                        DiceValue.setEditable(false);\r\n                        NumberOfDice.setEditable(false);\r\n                        Perudo.setEnabled(false);\r\n                        Bets.revalidate();\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n        jFrame.revalidate();\r\n        jFrame.add(TheTable);\r\n        jFrame.requestFocus();\r\n        jFrame.pack();\r\n\r\n    }\r\n\r\n    //TODO сделать отдельную функцию для refresh (запихнуть туда контейнер)\r\n    public void refresh() {\r\n\r\n    }\r\n\r\n    public void enterLobby() {\r\n        try {\r\n            out.writeObject(\"enterLobby:\");\r\n            UUID uuid = UUID.randomUUID();\r\n            out.writeObject(String.valueOf(uuid));\r\n            String s = null;\r\n            s = String.valueOf(in.readObject());\r\n            System.out.println(s);\r\n            user = new User(String.valueOf(uuid));\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    public void leaveLobby() {\r\n        try {\r\n            out.writeObject(\"leaveLobby:\");\r\n            out.writeObject(user.getUuid());\r\n            String s = String.valueOf(in.readObject());\r\n            System.out.println(s);\r\n\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void readyToGame() {\r\n        try {\r\n            out.writeObject(\"readytogame:\");\r\n            out.writeObject(String.valueOf(user.getUuid()));\r\n            String s = String.valueOf(in.readObject());\r\n            System.out.println(s);\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void notReadyToGame() {\r\n        try {\r\n            out.writeObject(\"notreadytogame:\");\r\n            out.writeObject(user.getUuid());\r\n            String s = String.valueOf(in.readObject());\r\n            System.out.println(s);\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public int getLobbyNumber() {\r\n        try {\r\n            out.writeObject(\"getlobbynumber:\");\r\n            int number = Integer.parseInt(String.valueOf(in.readObject()));\r\n            System.out.println(number);\r\n            return number;\r\n\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public int getReadyNumber() {\r\n        try {\r\n            out.writeObject(\"getreadynumber:\");\r\n            int number = Integer.parseInt(String.valueOf(in.readObject()));\r\n            System.out.println(number);\r\n            return number;\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public boolean isInLobby() {\r\n        try {\r\n            out.writeObject(\"isinlobby:\");\r\n            out.writeObject(user.getUuid());\r\n            String s = String.valueOf(in.readObject());\r\n            System.out.println(s);\r\n            //System.out.println(isin);\r\n            return Boolean.parseBoolean(s);\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public String getGameId() {\r\n        try {\r\n            out.writeObject(\"getgameid:\");\r\n            out.writeObject(user.getUuid());\r\n            String gameId = String.valueOf(in.readObject());\r\n            System.out.println(gameId);\r\n            return gameId;\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public void imOutOfGame() {\r\n        try {\r\n            out.writeObject(\"imoutofgame:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    public void tryToDeleteGame() {\r\n        try {\r\n            out.writeObject(\"trytodeletegame:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public boolean isInGame() {\r\n        try {\r\n            out.writeObject(\"isingame:\");\r\n            out.writeObject(user.getUuid());\r\n            return Boolean.parseBoolean(String.valueOf(in.readObject()));\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    public void createGame() {\r\n        try {\r\n            out.writeObject(\"createGame:\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public Vector<String[]> getHistory() {\r\n        try {\r\n            out.writeObject(\"gethistory:\");\r\n            out.writeObject(user.getGameId());\r\n            String inp = String.valueOf(in.readObject());\r\n            Vector<String[]> ss = new Vector<String[]>();\r\n            if (!inp.equals(\"\")) {\r\n                String[] s = inp.split(\"\\\\%\");\r\n                for (int i = 0; i < s.length; i++) {\r\n                    ss.add(s[i].split(\"\\\\$\"));\r\n                }\r\n                return ss;\r\n            } else {\r\n                String[] s = {\"\"};\r\n                ss.add(s);\r\n                return ss;\r\n            }\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public String[] getTurn() {\r\n        try {\r\n            out.writeObject(\"getTurn:\");\r\n            out.writeObject(user.getGameId());\r\n            return String.valueOf(in.readObject()).split(\"\\\\$\");\r\n\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public void changeTurn() {\r\n        try {\r\n            out.writeObject(\"changeTurn:\");\r\n            out.writeObject(user.getGameId());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public String getMyColor() {\r\n        try {\r\n            out.writeObject(\"getmycolor:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n            return String.valueOf(in.readObject());\r\n\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public String getPlayersColorsAndDices() {\r\n        try {\r\n            out.writeObject(\"getplayerscolorsanddices:\");\r\n            out.writeObject(user.getGameId());\r\n            return String.valueOf(in.readObject());\r\n\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public int getMyResult() {\r\n        try {\r\n            out.writeObject(\"getmyresult:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n            return Integer.parseInt(String.valueOf(in.readObject()));\r\n\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public void setBet(String dice, String value) {\r\n        try {\r\n            out.writeObject(\"setbet:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId() + \"$\" + dice + \"$\" + value);\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public String[] getLastDiceAndValue() {\r\n        String[] a = {};\r\n        try {\r\n            out.writeObject(\"getlastdiceandvalue:\");\r\n            out.writeObject(user.getGameId());\r\n            String[] s = String.valueOf(in.readObject()).split(\"\\\\$\");\r\n            return s;\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return a;\r\n        }\r\n\r\n    }\r\n\r\n    public void perudo() {\r\n        try {\r\n            out.writeObject(\"perudo:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public boolean isGameOver(){\r\n        try {\r\n            out.writeObject(\"isgameover:\");\r\n            out.writeObject(user.getGameId());\r\n            return Boolean.parseBoolean(String.valueOf(in.readObject()));\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Window.java	(revision e9ff46e4555e6f0d734d44b59a03052674034836)
+++ src/Window.java	(date 1591641206742)
@@ -46,7 +46,7 @@
 
         JMenuBar mainMenu = new JMenuBar();
         JMenu main = new JMenu("Приложение");
-        JMenuItem Connect = new JMenuItem("Присоедениться");
+        JMenuItem Connect = new JMenuItem("Присоединиться");
         main.add(Connect);
         JMenuItem Rules = new JMenuItem("Правила");
         main.add(Rules);
@@ -256,67 +256,6 @@
         JMenu jmenu = (JMenu) jmenubar.getComponent(0);
         JMenuItem connect = (JMenuItem) jmenu.getItem(0);
 
-        //Ниже создаётся диалоговое окно для того чтоб загадать число противнику
-        //Вроде не нужно, но я не уверен
-        /*
-        JDialog MakeNumber = new JDialog();
-        MakeNumber.setTitle("Загадай число");
-        MakeNumber.setModal(true);
-        MakeNumber.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
-        JTextArea numbercheckarea = new JTextArea("Загадай число от 1234 до 9876 без повторений цифр");
-        numbercheckarea.setEditable(false);
-        TextField numbercheckfield = new TextField("", 10);
-        JButton numbercheckbutton = new JButton("Загадать число");
-
-        //Слушатель на кнопку Загадать число
-        numbercheckbutton.addActionListener(e -> {
-            int number;
-            try {
-                number = Integer.parseInt(numbercheckfield.getText());
-                if (number >= 1234) {
-                    if (number <= 9876) {
-                        int first = (int) number / 1000;
-                        int second = (int) ((number / 100) % 10);
-                        int third = (int) ((number / 10) % 10);
-                        int forth = number % 10;
-                        if (first != second && first != third && first != forth && second != third && second != forth && third != forth) {
-                            makeNumber(number);
-                            MakeNumber.dispose();
-                        } else throw new NumberFormatException();
-                    } else throw new NumberFormatException();
-                } else throw new NumberFormatException();
-            } catch (NumberFormatException nfe) {
-
-                JDialog error = new JDialog();
-                error.setTitle("Error");
-                error.setModal(true);
-                error.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
-                JTextArea textArea = new JTextArea();
-                textArea.setFont(new Font("TimesRoman", Font.ITALIC, 30));
-                textArea.setText("Указанно неверное чилсло. Число должно быть в диапазоне от 1234 до 9876 и числа не должны повторяться");
-                textArea.setEditable(false);
-                Container errorContentPane = error.getContentPane();
-                errorContentPane.add(textArea);
-                error.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);
-                error.setResizable(false);
-                error.pack();
-                error.setVisible(true);
-            }
-        });
-
-        Container container2 = MakeNumber.getContentPane();
-        container2.setLayout(new FlowLayout(FlowLayout.CENTER));
-        container2.add(numbercheckarea);
-        container2.add(numbercheckfield);
-        container2.add(numbercheckbutton);
-        MakeNumber.setPreferredSize(new Dimension(390, 130));
-        MakeNumber.setBounds(700, 400, 100, 100);
-        MakeNumber.setResizable(false);
-        MakeNumber.pack();
-        MakeNumber.setVisible(true);
-
-         */
-
         //Создание игрового поля
         JPanel TheTable = new JPanel();
         TheTable.update(getGraphics());
@@ -984,7 +923,6 @@
         }
     }
 
-
     public void leaveLobby() {
         try {
             out.writeObject("leaveLobby:");
@@ -1071,8 +1009,6 @@
         }
     }
 
-
-
     public void imOutOfGame() {
         try {
             out.writeObject("imoutofgame:");
@@ -1082,7 +1018,6 @@
         }
     }
 
-
     public void tryToDeleteGame() {
         try {
             out.writeObject("trytodeletegame:");
@@ -1169,8 +1104,6 @@
         }
     }
 
-
-
     public String getPlayersColorsAndDices() {
         try {
             out.writeObject("getplayerscolorsanddices:");
Index: src/DataBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.sql.*;\r\nimport java.util.*;\r\n\r\n// Функции для работы с SQLite\r\npublic class DataBase {\r\n    Connection dbConnection;\r\n\r\n    DataBase(){\r\n        //String connectionString = \"jdbc:sqlite:C:\\\\Users\\\\HeroBaga\\\\Desktop\\\\ArtemCourseWork\\\\Course_Work\\\\src\\\\DB.db\";\r\n        String connectionString = \"jdbc:sqlite:./src/DB.db\";\r\n\r\n        try {\r\n            dbConnection = DriverManager.getConnection(connectionString);\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public Connection getDbConnection() {\r\n        return dbConnection;\r\n    }\r\n\r\n\r\n    // Запись игрока в лобби\r\n    public void enterLobby(String playerId){\r\n        String insert = \"Insert into Lobby values (?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(insert);\r\n           prST.setString(1, playerId);\r\n\r\n            prST.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    // Удаление игрока из лобби\r\n    public void leaveLobby(String playerId){\r\n        String insert = \"Delete from Lobby where player_id = (?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(insert);\r\n            prST.setString(1, playerId);\r\n\r\n            prST.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    // Получение кол-ва игроков в лобби\r\n    public int numberLobby() throws SQLException {\r\n        ResultSet resSet = null;\r\n\r\n        String select = \"SELECT count(*) FROM Lobby\";\r\n\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            resSet = prST.executeQuery();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        assert resSet != null;\r\n        return Integer.parseInt(resSet.getString(1));\r\n    }\r\n\r\n\r\n\r\n    // Проверка на существование игрока в лобби\r\n    public boolean isinLobby(String playerId) throws SQLException {\r\n        ResultSet resSet = null;\r\n\r\n        String select = \"SELECT count(*) FROM Lobby where player_id = (?) \";\r\n\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, playerId);\r\n\r\n            resSet = prST.executeQuery();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        assert resSet != null;\r\n        int size = Integer.parseInt(resSet.getString(1));\r\n        return size > 0;\r\n    }\r\n\r\n\r\n    // Добавление игрока в статус готовых\r\n    public void addReady(String playerId){\r\n        String insert = \"Insert into Ready values (?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(insert);\r\n            prST.setString(1, playerId);\r\n\r\n            prST.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Удаление игрока из готовых\r\n    public void notReady(String playerId){\r\n        String insert = \"Delete from Ready where player_id = (?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(insert);\r\n            prST.setString(1, playerId);\r\n\r\n            prST.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    // Запрос кол-ва готовых игроков\r\n    public int numberReady() throws SQLException {\r\n        ResultSet resSet = null;\r\n\r\n        String select = \"SELECT count(*) FROM Ready\";\r\n\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            resSet = prST.executeQuery();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        assert resSet != null;\r\n        return Integer.parseInt(resSet.getString(1));\r\n    }\r\n\r\n\r\n    // Проверка на существование такого готового игрока\r\n    public boolean isinReady(String playerId) throws SQLException {\r\n        ResultSet resSet = null;\r\n\r\n        String select = \"SELECT count(*) FROM Ready where player_id = (?) \";\r\n\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, playerId);\r\n\r\n            resSet = prST.executeQuery();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        assert resSet != null;\r\n        int size = Integer.parseInt(resSet.getString(1));\r\n        return size > 0;\r\n    }\r\n\r\n\r\n    // Получение готовых игроков\r\n    public Vector<String> getplayersReady() throws SQLException {\r\n        ResultSet resSet = null;\r\n\r\n        String select = \"SELECT * FROM Ready\";\r\n\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            resSet = prST.executeQuery();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        Vector<String> s = new Vector<>();\r\n\r\n        assert resSet != null;\r\n        while (resSet.next()) {\r\n            s.add(resSet.getString(1));\r\n        }\r\n        return s;\r\n\r\n    }\r\n\r\n\r\n    // Очистка лобби\r\n    public void clearLobby(){\r\n        String insert = \"Delete from Lobby\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(insert);\r\n            prST.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    // Очистка готовых\r\n    public void clearReady(){\r\n        String insert = \"Delete from Ready\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(insert);\r\n\r\n            prST.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    // Функция бросания N кубиков\r\n    public int roll(int Ndice){\r\n        int dice = 0;\r\n        for (int i = 0; i <Ndice; i++){\r\n            dice = (int) (dice + ( (int)(Math.random()*6) +1)*Math.pow(10, i));\r\n        }\r\n        return dice;\r\n    }\r\n\r\n\r\n    // Создание игры\r\n    public void createGame(){\r\n        ResultSet resSet;\r\n        String select = \"SELECT Count(player_id) FROM Ready\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            resSet = prST.executeQuery();\r\n            int c = resSet.getInt(1);\r\n            if (c>5) {c=5;}\r\n\r\n            select = \"Select player_id from Ready\";\r\n            prST = getDbConnection().prepareStatement(select);\r\n            resSet = prST.executeQuery();\r\n\r\n            String insert = \"Insert into Games values (?, ?, ?, ?, ?, ?, ?)\";\r\n            String gameId = String.valueOf(UUID.randomUUID());\r\n            int i=0;\r\n            String[] colors = {\"Красный\", \"Зеленый\", \"Синий\", \"Желтый\", \"Фиолетовый\"};\r\n            while (resSet.next()){\r\n                String pid = resSet.getString(1);\r\n                prST = getDbConnection().prepareStatement(insert);\r\n                prST.setString(1, pid);\r\n                prST.setString(2, gameId);\r\n                //TODO не забыть изменить обратно на 5\r\n                prST.setInt(3,1); //здесь\r\n\r\n                prST.setInt(4, roll(1)); // и здесь\r\n                prST.setString(5, colors[i]);\r\n                if (colors[i].equals(\"Красный\")){\r\n                    prST.setInt(6, 1);\r\n                }else{\r\n                    prST.setInt(6, 0);\r\n                }\r\n                prST.setInt(7, 1);\r\n\r\n                prST.executeUpdate();\r\n\r\n                notReady(pid);\r\n                leaveLobby(pid);\r\n                i++;\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    // Проверка на существование игрока в игре\r\n    public boolean playerInGame(String playerId) throws SQLException {\r\n        ResultSet resSet = null;\r\n\r\n        String select = \"SELECT Count(*) FROM Games where player_id=(?)\";\r\n\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, playerId);\r\n\r\n            resSet = prST.executeQuery();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        assert resSet != null;\r\n        int size = Integer.parseInt(resSet.getString(1));\r\n        return size > 0;\r\n    }\r\n\r\n\r\n    // Запрос на ID игры в которой находится игрок\r\n    public String getGameId(String playerId) throws SQLException {\r\n        ResultSet resSet = null;\r\n\r\n        String select = \"SELECT game_id FROM Games where player_id=(?)\";\r\n\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, playerId);\r\n\r\n            resSet = prST.executeQuery();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        Vector<String> s = new Vector<>();\r\n\r\n        assert resSet != null;\r\n        while (resSet.next()) {\r\n            s.add(resSet.getString(1));\r\n        }\r\n        return s.get(0);\r\n    }\r\n\r\n\r\n    // Запрос кол-ва игроков в игре\r\n    public int getGameNumber(String gameId) throws SQLException {\r\n        ResultSet resSet = null;\r\n\r\n        String select = \"SELECT count(*) FROM Games where game_id=(?)\";\r\n\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, gameId);\r\n            resSet = prST.executeQuery();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        assert resSet != null;\r\n        return Integer.parseInt(resSet.getString(1));\r\n    }\r\n\r\n\r\n    // Запрос истории ставок\r\n    public String getHistory(String gameId) throws SQLException {\r\n        ResultSet resSet = null;\r\n\r\n        String select = \"SELECT player_id, dices, value, color  FROM Game_History where game_id=(?)\";\r\n\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, gameId);\r\n\r\n            resSet = prST.executeQuery();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        String s = \"\";\r\n\r\n        assert resSet != null;\r\n        while (resSet.next()) {\r\n            s += resSet.getString(1) + \"$\"\r\n                    + resSet.getString(2)+ \"$\"\r\n                    + resSet.getString(3)+ \"$\"\r\n                    + resSet.getString(4)+ \"%\";\r\n        }\r\n        try{\r\n            return s.substring(0, s.length()-1);\r\n        } catch (StringIndexOutOfBoundsException e){\r\n            e.printStackTrace();\r\n            return \"\";\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // Запрос на то, какой игрок ходит\r\n    public String getTurn(String gameId) throws SQLException {\r\n        ResultSet resSet = null;\r\n        String select = \"Select player_id, color from Games where game_id=(?) and ishisturn=1\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, gameId);\r\n\r\n            resSet = prST.executeQuery();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        String s = \"\";\r\n\r\n        assert resSet != null;\r\n        while (resSet.next()) {\r\n            s += resSet.getString(1) + \"$\"\r\n                    + resSet.getString(2);\r\n        }\r\n        return s;\r\n    }\r\n\r\n\r\n    // Смена хода\r\n    public void changeTurn(String gameId) throws SQLException {\r\n        ResultSet resSet = null;\r\n        ResultSet resSet2 = null;\r\n        String select = \"Select player_id, color from Games where game_id=(?) and ishisturn=1\";\r\n        String select2 = \"Select color, dices from Games where game_id=(?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, gameId);\r\n            resSet = prST.executeQuery();\r\n\r\n            prST = getDbConnection().prepareStatement(select2);\r\n            prST.setString(1, gameId);\r\n            resSet2 = prST.executeQuery();\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        int number = getGameNumber(gameId);\r\n        String[] s = {resSet.getString(1), resSet.getString(2)};\r\n        int next_color_index=0;\r\n\r\n        String[] colors = {\"Красный\", \"Зеленый\", \"Синий\", \"Желтый\", \"Фиолетовый\"};\r\n        String[] colors2 = new String[number];\r\n        List<String> newcolors = new ArrayList<String>(Arrays.asList(colors));\r\n        while (resSet2.next()){\r\n            if (resSet2.getString(2).equals(\"0\")){\r\n                String colortoremove = resSet2.getString(1);\r\n                newcolors.remove(colortoremove);\r\n                number--;\r\n            }\r\n        }\r\n        colors = newcolors.toArray(new String[0]);\r\n        for (int i = 0; i < number; i++){\r\n            colors2[i] = colors[i];\r\n            if (s[1].equals(colors[i])){ next_color_index=i;}\r\n        }\r\n\r\n        if (next_color_index+1>=number){\r\n            next_color_index = 0;\r\n        } else{\r\n            next_color_index++;\r\n        }\r\n\r\n\r\n        String update = \"Update Games set ishisturn=1 where game_id=(?) and color = (?)\";\r\n        String update2 = \"Update Games set ishisturn=0 where game_id=(?) and color = (?)\";\r\n        prST = getDbConnection().prepareStatement(update);\r\n        prST.setString(1, gameId);\r\n        prST.setString(2, colors2[next_color_index]);\r\n        prST.executeUpdate();\r\n\r\n        prST = getDbConnection().prepareStatement(update2);\r\n        prST.setString(1, gameId);\r\n        prST.setString(2, s[1]);\r\n        prST.executeUpdate();\r\n    }\r\n\r\n\r\n    // Запрос цвета игрока\r\n    public String getMyColor(String playerId, String gameId) throws SQLException {\r\n        ResultSet resSet = null;\r\n        String select = \"Select color from Games where player_id =(?) and game_id=(?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, playerId);\r\n            prST.setString(2, gameId);\r\n\r\n            resSet = prST.executeQuery();\r\n            return resSet.getString(1);\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    // Запрос цветов и кол-ва оставшихся кубиков игроков\r\n    public String getPlayersColorsAndDices(String gameId){\r\n        ResultSet resSet = null;\r\n        String select = \"Select color, dices from Games where game_id=(?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, gameId);\r\n\r\n            resSet = prST.executeQuery();\r\n            String s = \"\";\r\n\r\n            while (resSet.next()){\r\n                s += resSet.getString(1) + \"$\" + resSet.getString(2)+\"%\";\r\n            }\r\n            return s.substring(0, s.length()-1);\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    // Получение выпавшей комбинации игрока\r\n    public int getMyResult(String playerId, String gameId){\r\n        ResultSet resSet = null;\r\n        String select = \"Select result from Games where player_id = (?) and game_id=(?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, playerId);\r\n\r\n            prST.setString(2, gameId);\r\n\r\n            resSet = prST.executeQuery();\r\n            return resSet.getInt(1);\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n    // Создание ставки\r\n    public void setBet(String playerId, String gameId, String dice, String value){\r\n        String insert = \"Insert into Game_History values (?,?,?,?,?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(insert);\r\n            prST.setString(1, gameId);\r\n            prST.setString(2, playerId);\r\n            prST.setInt(3, Integer.parseInt(dice));\r\n            prST.setInt(4, Integer.parseInt(value));\r\n            prST.setString(5, getMyColor(playerId, gameId));\r\n            prST.executeUpdate();\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // Запрос последней ставки из истории\r\n    public Object[] getLastDiceAndValue(String gameId){\r\n        ResultSet resSet = null;\r\n        String select = \"Select player_id, dices, value from Game_History where game_id=(?)\";\r\n        PreparedStatement prST;\r\n        Object[] res = {\"\",0,0};\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n\r\n            prST.setString(1, gameId);\r\n\r\n            resSet = prST.executeQuery();\r\n            while (resSet.next()){\r\n                res[0] = resSet.getString(1);\r\n                res[1] = resSet.getString(2);\r\n                res[2] = resSet.getString(3);\r\n            }\r\n            return res;\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return res;\r\n        }\r\n    }\r\n\r\n\r\n    // Получение всех комбинаций на столе\r\n    public HashMap<Integer, Integer> getAllTable(String gameId){\r\n        ResultSet resSet = null;\r\n        String select = \"Select result from Games where game_id=(?)\";\r\n        PreparedStatement prST;\r\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\r\n        for (int i = 1; i <7; i++){\r\n            map.put(i, 0);\r\n        }\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n\r\n            prST.setString(1, gameId);\r\n\r\n            resSet = prST.executeQuery();\r\n            while (resSet.next()){\r\n                int number = resSet.getInt(1);\r\n                char[] numberArr = String.valueOf(number).toCharArray();\r\n                for (char c : numberArr) {\r\n                    number = Integer.parseInt(String.valueOf(c));\r\n                    if (number >= 1 && number <= 6) {\r\n                        int n = map.get(number);\r\n                        map.remove(number);\r\n                        map.put(number, n + 1);\r\n                    }\r\n                    System.out.println(map);\r\n                }\r\n            }\r\n            for (int i = 2; i <7; i++){\r\n                int number = map.get(i);\r\n                map.remove(i);\r\n                map.put(i, number+map.get(1));\r\n            }\r\n            return map;\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return map;\r\n        }\r\n    }\r\n\r\n    // Смена кол-ва кубиков\r\n    public void updateDices(String playerId, String gameId){\r\n        ResultSet resSet = null;\r\n\r\n        String update = \"Update Games set dices=(?) where player_id = (?) and game_id=(?)\";\r\n        String select = \"Select dices from Games where player_id = (?) and game_id=(?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, playerId);\r\n            prST.setString(2, gameId);\r\n            resSet = prST.executeQuery();\r\n            prST = getDbConnection().prepareStatement(update);\r\n            prST.setInt(1, resSet.getInt(1)-1);\r\n            prST.setString(2, playerId);\r\n            prST.setString(3,gameId);\r\n            prST.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // Смена выпавших комбинаций\r\n    public void updateResults(String gameId){\r\n        ResultSet resSet = null;\r\n\r\n        String update = \"Update Games set result=(?) where player_id = (?) and game_id=(?)\";\r\n        String select = \"Select player_id, dices from Games where game_id=(?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, gameId);\r\n            resSet = prST.executeQuery();\r\n            while (resSet.next()) {\r\n                prST = getDbConnection().prepareStatement(update);\r\n                int dices = resSet.getInt(2);\r\n                if (dices>0){\r\n                    int dice_rolled = roll(dices);\r\n                    prST.setInt(1, dice_rolled);\r\n                    prST.setString(2, resSet.getString(1));\r\n                    prST.setString(3, gameId);\r\n                    prST.executeUpdate();\r\n                }else{\r\n                    prST.setInt(1, 0);\r\n                    prST.setString(2, resSet.getString(1));\r\n                    prST.setString(3, gameId);\r\n                    prST.executeUpdate();\r\n                }\r\n\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Смена хода после нажатой кнопки Блеф\r\n    public void changeTurnWithPerudo(String playerId, String gameId){\r\n        ResultSet resSet = null;\r\n        String update = \"Update Games set ishisturn=0 where game_id = (?)\";\r\n        String update2 = \"Update Games set ishisturn=1 where player_id=(?) and game_id=(?)\";\r\n        String select = \"Select dices from Games where player_id=(?) and game_id=(?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, playerId);\r\n            prST.setString(2, gameId);\r\n            resSet = prST.executeQuery();\r\n\r\n            if (resSet.getInt(1)==0){\r\n                changeTurn(gameId);\r\n            } else {\r\n\r\n            prST = getDbConnection().prepareStatement(update);\r\n            prST.setString(1, gameId);\r\n            prST.executeUpdate();\r\n\r\n            prST = getDbConnection().prepareStatement(update2);\r\n            prST.setString(1, playerId);\r\n            prST.setString(2, gameId);\r\n            prST.executeUpdate();}\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    // Проверка на то, кончилась ли игра\r\n    public boolean isGameOver(String gameId) throws SQLException {\r\n        ResultSet resSet = null;\r\n        String select = \"Select count(*) from Games where game_id=(?) and dices>0\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, gameId);\r\n            resSet = prST.executeQuery();\r\n\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resSet.getInt(1)==1;\r\n\r\n    }\r\n\r\n    // Игрок выходит из игры\r\n    public void imOutOfGame(String playerId, String gameId){\r\n        String update = \"Update Games set isingame=0 where player_id=(?) and game_id=(?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(update);\r\n            prST.setString(1, playerId);\r\n            prST.setString(2, gameId);\r\n            prST.executeUpdate();\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Попытка удаления игры\r\n    public void tryToDeleteGame(String playerId, String gameId){\r\n        ResultSet resSet = null;\r\n        String select = \"Select count(*) from Games where game_id=(?) and isingame=1\";\r\n        String update = \"Delete from Games where game_id=(?)\";\r\n        PreparedStatement prST;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(select);\r\n            prST.setString(1, gameId);\r\n            resSet = prST.executeQuery();\r\n            if (resSet.getInt(1)==0){\r\n                prST = getDbConnection().prepareStatement(update);\r\n                prST.setString(1, gameId);\r\n                prST.executeUpdate();\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    // Очистка игр\r\n    public void clearGame(){\r\n        String insert = \"Delete from Games\";\r\n        PreparedStatement prST = null;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(insert);\r\n            prST.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Очистка истории\r\n    public void clearHistory(){\r\n        String insert = \"Delete from Game_History\";\r\n        PreparedStatement prST = null;\r\n        try {\r\n            prST = getDbConnection().prepareStatement(insert);\r\n            prST.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/DataBase.java	(revision e9ff46e4555e6f0d734d44b59a03052674034836)
+++ src/DataBase.java	(date 1591646523897)
@@ -1,12 +1,11 @@
 import java.sql.*;
 import java.util.*;
 
-// Функции для работы с SQLite
+//фКласс для работы с SQLite
 public class DataBase {
     Connection dbConnection;
 
     DataBase(){
-        //String connectionString = "jdbc:sqlite:C:\\Users\\HeroBaga\\Desktop\\ArtemCourseWork\\Course_Work\\src\\DB.db";
         String connectionString = "jdbc:sqlite:./src/DB.db";
 
         try {
@@ -20,7 +19,6 @@
         return dbConnection;
     }
 
-
     // Запись игрока в лобби
     public void enterLobby(String playerId){
         String insert = "Insert into Lobby values (?)";
@@ -35,7 +33,6 @@
         }
     }
 
-
     // Удаление игрока из лобби
     public void leaveLobby(String playerId){
         String insert = "Delete from Lobby where player_id = (?)";
@@ -50,7 +47,6 @@
         }
     }
 
-
     // Получение кол-ва игроков в лобби
     public int numberLobby() throws SQLException {
         ResultSet resSet = null;
@@ -68,8 +64,6 @@
         return Integer.parseInt(resSet.getString(1));
     }
 
-
-
     // Проверка на существование игрока в лобби
     public boolean isinLobby(String playerId) throws SQLException {
         ResultSet resSet = null;
@@ -90,7 +84,6 @@
         return size > 0;
     }
 
-
     // Добавление игрока в статус готовых
     public void addReady(String playerId){
         String insert = "Insert into Ready values (?)";
@@ -119,7 +112,6 @@
         }
     }
 
-
     // Запрос кол-ва готовых игроков
     public int numberReady() throws SQLException {
         ResultSet resSet = null;
@@ -137,7 +129,6 @@
         return Integer.parseInt(resSet.getString(1));
     }
 
-
     // Проверка на существование такого готового игрока
     public boolean isinReady(String playerId) throws SQLException {
         ResultSet resSet = null;
@@ -158,31 +149,6 @@
         return size > 0;
     }
 
-
-    // Получение готовых игроков
-    public Vector<String> getplayersReady() throws SQLException {
-        ResultSet resSet = null;
-
-        String select = "SELECT * FROM Ready";
-
-        PreparedStatement prST;
-        try {
-            prST = getDbConnection().prepareStatement(select);
-            resSet = prST.executeQuery();
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-        Vector<String> s = new Vector<>();
-
-        assert resSet != null;
-        while (resSet.next()) {
-            s.add(resSet.getString(1));
-        }
-        return s;
-
-    }
-
-
     // Очистка лобби
     public void clearLobby(){
         String insert = "Delete from Lobby";
@@ -195,7 +161,6 @@
         }
     }
 
-
     // Очистка готовых
     public void clearReady(){
         String insert = "Delete from Ready";
@@ -209,7 +174,6 @@
         }
     }
 
-
     // Функция бросания N кубиков
     public int roll(int Ndice){
         int dice = 0;
@@ -219,7 +183,6 @@
         return dice;
     }
 
-
     // Создание игры
     public void createGame(){
         ResultSet resSet;
@@ -245,9 +208,9 @@
                 prST.setString(1, pid);
                 prST.setString(2, gameId);
                 //TODO не забыть изменить обратно на 5
-                prST.setInt(3,1); //здесь
+                prST.setInt(3,5); //здесь
 
-                prST.setInt(4, roll(1)); // и здесь
+                prST.setInt(4, roll(5   )); // и здесь
                 prST.setString(5, colors[i]);
                 if (colors[i].equals("Красный")){
                     prST.setInt(6, 1);
@@ -268,7 +231,6 @@
         }
     }
 
-
     // Проверка на существование игрока в игре
     public boolean playerInGame(String playerId) throws SQLException {
         ResultSet resSet = null;
@@ -290,7 +252,6 @@
         return size > 0;
     }
 
-
     // Запрос на ID игры в которой находится игрок
     public String getGameId(String playerId) throws SQLException {
         ResultSet resSet = null;
@@ -316,7 +277,6 @@
         return s.get(0);
     }
 
-
     // Запрос кол-ва игроков в игре
     public int getGameNumber(String gameId) throws SQLException {
         ResultSet resSet = null;
@@ -335,7 +295,6 @@
         return Integer.parseInt(resSet.getString(1));
     }
 
-
     // Запрос истории ставок
     public String getHistory(String gameId) throws SQLException {
         ResultSet resSet = null;
@@ -370,7 +329,6 @@
 
     }
 
-
     // Запрос на то, какой игрок ходит
     public String getTurn(String gameId) throws SQLException {
         ResultSet resSet = null;
@@ -394,7 +352,6 @@
         return s;
     }
 
-
     // Смена хода
     public void changeTurn(String gameId) throws SQLException {
         ResultSet resSet = null;
@@ -455,7 +412,6 @@
         prST.executeUpdate();
     }
 
-
     // Запрос цвета игрока
     public String getMyColor(String playerId, String gameId) throws SQLException {
         ResultSet resSet = null;
@@ -475,7 +431,6 @@
         return null;
     }
 
-
     // Запрос цветов и кол-ва оставшихся кубиков игроков
     public String getPlayersColorsAndDices(String gameId){
         ResultSet resSet = null;
@@ -499,7 +454,6 @@
         return null;
     }
 
-
     // Получение выпавшей комбинации игрока
     public int getMyResult(String playerId, String gameId){
         ResultSet resSet = null;
@@ -520,7 +474,6 @@
         }
     }
 
-
     // Создание ставки
     public void setBet(String playerId, String gameId, String dice, String value){
         String insert = "Insert into Game_History values (?,?,?,?,?)";
@@ -566,7 +519,6 @@
         }
     }
 
-
     // Получение всех комбинаций на столе
     public HashMap<Integer, Integer> getAllTable(String gameId){
         ResultSet resSet = null;
@@ -631,7 +583,6 @@
 
     }
 
-
     // Смена выпавших комбинаций
     public void updateResults(String gameId){
         ResultSet resSet = null;
@@ -744,13 +695,13 @@
                 prST = getDbConnection().prepareStatement(update);
                 prST.setString(1, gameId);
                 prST.executeUpdate();
+                clearHistory();
             }
         } catch (SQLException e) {
             e.printStackTrace();
         }
     }
 
-
     // Очистка игр
     public void clearGame(){
         String insert = "Delete from Games";
