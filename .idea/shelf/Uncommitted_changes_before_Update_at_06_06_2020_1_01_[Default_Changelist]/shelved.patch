Index: src/Window.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.net.Socket;\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\nimport java.util.UUID;\r\nimport java.util.Vector;\r\n\r\npublic class Window extends JPanel {\r\n    private Image image;\r\n    BufferedImage background;\r\n    String url = \"https://en.wikipedia.org/wiki/Dudo\";\r\n    int width = 1024;\r\n    int height = 680;\r\n    Socket clientSocket;\r\n    ObjectOutputStream out;\r\n    ObjectInputStream in;\r\n    User user;\r\n\r\n    JFrame jFrame = new JFrame(\"Perudo\");\r\n\r\n    public Window() throws IOException {\r\n        /*try {\r\n            image = ImageIO.read(new File(\"./src/Background.jpg\"));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        */\r\n\r\n        clientSocket = new Socket(\"localhost\", 8081);\r\n        out = new ObjectOutputStream(clientSocket.getOutputStream());\r\n        in = new ObjectInputStream(clientSocket.getInputStream());\r\n\r\n\r\n        jFrame.setVisible(true);\r\n        Toolkit toolkit = Toolkit.getDefaultToolkit();\r\n        Dimension dimension = toolkit.getScreenSize();\r\n        jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n        JPanel jPanel = new JPanel();\r\n        jPanel.setLayout(new GridLayout(1, 1, 5, 5));\r\n\r\n        JMenuBar mainMenu = new JMenuBar();\r\n        JMenu main = new JMenu(\"Приложение\");\r\n        JMenuItem Connect = new JMenuItem(\"Присоедениться\");\r\n        main.add(Connect);\r\n        JMenuItem Rules = new JMenuItem(\"Правила\");\r\n        main.add(Rules);\r\n        JMenuItem Exit = new JMenuItem(\"Выйти\");\r\n        main.add(Exit);\r\n        mainMenu.add(main);\r\n        jPanel.add(mainMenu);\r\n\r\n        Container container = jFrame.getContentPane();\r\n\r\n        jFrame.setPreferredSize(new Dimension(width, height));\r\n        jFrame.setBounds(dimension.width / 2 - width / 2, dimension.height / 2 - height / 2, width, height);\r\n        jFrame.pack();\r\n\r\n        container.add(jPanel, BorderLayout.NORTH); // Номер 0 в контейнере container (не изменять)\r\n\r\n        Rules.addActionListener(e -> {\r\n            try {\r\n                Desktop.getDesktop().browse(new URI(url));\r\n            } catch (IOException | URISyntaxException ex) {\r\n                System.err.println(\"Ошибка страницы. \" + ex.getLocalizedMessage());\r\n            }\r\n\r\n\r\n        });\r\n        Connect.addActionListener(e -> ConnectLobby(container));\r\n        Exit.addActionListener(actionEvent -> jFrame.dispose());\r\n\r\n        jFrame.setPreferredSize(new Dimension(width, height));\r\n\r\n        jFrame.setResizable(false);\r\n        jFrame.setVisible(true);\r\n\r\n\r\n    }\r\n\r\n    public void draw(Graphics g, Container field) {\r\n        g.drawImage(image, 0, 0, null);\r\n    }\r\n\r\n    public void ConnectLobby(Container container) {\r\n        //Для отрисовки\r\n        //draw(container.getGraphics(), container);\r\n\r\n        JPanel controlPanel = (JPanel) container.getComponent(0);\r\n        JMenuBar jmenubar = (JMenuBar) controlPanel.getComponent(0);\r\n        JMenu jmenu = (JMenu) jmenubar.getComponent(0);\r\n        JMenuItem connect = (JMenuItem) jmenu.getItem(0);\r\n        JTextArea Players = new JTextArea();\r\n        JTextArea Readys = new JTextArea();\r\n\r\n        System.out.println(\"HERE\");\r\n        connect.setEnabled(false);\r\n        enterLobby();\r\n        if (isInLobby()) {\r\n            JDialog PreGame = new JDialog();\r\n            PreGame.setTitle(\"Лобби\");\r\n            PreGame.setModal(true);\r\n\r\n            Players.setFont(new Font(\"TimesRoman\", Font.ITALIC, 14));\r\n\r\n            Players.setText(\"Текущие колличество игроков в лобби:\" + getLobbyNumber());\r\n            Players.setEditable(false);\r\n            Players.setEditable(false);\r\n\r\n            Readys.setFont(new Font(\"TimesRoman\", Font.ITALIC, 14));\r\n            Readys.setText(\"Готовые игроки:\" + getReadyNumber());\r\n            Readys.setEditable(false);\r\n            Players.setEditable(false);\r\n\r\n            JPanel ControlButton = new JPanel();\r\n            JPanel PlayerTypeField = new JPanel();\r\n            PlayerTypeField.setLayout(new GridLayout(2, 1, 1, 1));\r\n            PlayerTypeField.add(Players, BorderLayout.NORTH);\r\n            PlayerTypeField.add(Readys, BorderLayout.SOUTH);\r\n\r\n\r\n            JButton LeaveLobby = new JButton(\"Покинуть лобби\");\r\n            LeaveLobby.setFocusable(false);\r\n            JButton StartGame = new JButton(\"Начать игру\");\r\n            StartGame.setFocusable(false);\r\n            StartGame.setEnabled(false);\r\n            JButton Refresh = new JButton(\"Обновить лобби\");\r\n\r\n            ControlButton.add(StartGame);\r\n            ControlButton.add(LeaveLobby);\r\n\r\n            ButtonGroup group = new ButtonGroup();\r\n            JRadioButton CheckforReady = new JRadioButton(\"Я готов\", false);\r\n            JRadioButton CheckforNotReady = new JRadioButton(\"Не готов\", true);\r\n            group.add(CheckforReady);\r\n            group.add(CheckforNotReady);\r\n            CheckforNotReady.setFocusable(false);\r\n            CheckforReady.setFocusable(false);\r\n\r\n                Refresh.addActionListener(e -> {\r\n                    //TODO Убрать запуск игры по нажатию обновить и автоматический запуск игры\r\n                    if (isInGame()) {\r\n                        PreGame.dispose();\r\n                        user.setgameId(getGameId());\r\n                        user.setColor(getMyColor());\r\n                        InGame(container);\r\n                    } else {\r\n                        Players.setText(\"Текущие колличество игроков в лобби:\" + getLobbyNumber());\r\n                        Readys.setText(\"Готовые игроки:\" + getReadyNumber());\r\n                    }\r\n\r\n\r\n            });\r\n\r\n            CheckforReady.addActionListener(e -> {\r\n                if (CheckforReady.isSelected()) {\r\n                    CheckforNotReady.setSelected(false);\r\n                    LeaveLobby.setEnabled(false);\r\n                    StartGame.setEnabled(true);\r\n                    readyToGame();\r\n\r\n\r\n                }\r\n            });\r\n\r\n            CheckforNotReady.addActionListener(e -> {\r\n                if (CheckforNotReady.isSelected()) {\r\n                    CheckforReady.setSelected(false);\r\n                    LeaveLobby.setEnabled(true);\r\n                    StartGame.setEnabled(false);\r\n                    notReadyToGame();\r\n                }\r\n\r\n            });\r\n\r\n            LeaveLobby.addActionListener(e -> {\r\n                leaveLobby();\r\n                PreGame.dispose();\r\n            });\r\n\r\n            StartGame.addActionListener(e -> {\r\n                if (!isInGame()) {\r\n                    if (getLobbyNumber() == getReadyNumber() && getReadyNumber() >= 3){\r\n                        createGame();\r\n                        PreGame.dispose();\r\n                        user.setgameId(getGameId());\r\n                        user.setColor(getMyColor());\r\n                        InGame(container);\r\n                    }else{\r\n                        JDialog WaitError = new JDialog();\r\n                        WaitError.setTitle(\"Error\");\r\n                        WaitError.setModal(true);\r\n                        WaitError.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                        JTextArea WaitErrorArea = new JTextArea();\r\n                        WaitErrorArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                        WaitErrorArea.setText(\"Минимальное количество игроков для игры 3\");\r\n                        WaitErrorArea.setEditable(false);\r\n                        Container errorContentPane = WaitError.getContentPane();\r\n                        errorContentPane.add(WaitErrorArea);\r\n                        WaitError.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                        WaitError.setResizable(false);\r\n                        WaitError.pack();\r\n                        WaitError.setVisible(true);\r\n                    }\r\n\r\n                } else {\r\n                    JDialog WaitError = new JDialog();\r\n                    WaitError.setTitle(\"Error\");\r\n                    WaitError.setModal(true);\r\n                    WaitError.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                    JTextArea WaitErrorArea = new JTextArea();\r\n                    WaitErrorArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                    WaitErrorArea.setText(\"Вы уже находитесь в игре, нажмите кнопку обновить, чтобы войти в игру.\");\r\n                    WaitErrorArea.setEditable(false);\r\n                    Container errorContentPane = WaitError.getContentPane();\r\n                    errorContentPane.add(WaitErrorArea);\r\n                    WaitError.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                    WaitError.setResizable(false);\r\n                    WaitError.pack();\r\n                    WaitError.setVisible(true);\r\n                }\r\n\r\n            });\r\n\r\n            JPanel LobbyPanel = new JPanel();\r\n            LobbyPanel.add(CheckforReady);\r\n            LobbyPanel.add(CheckforNotReady);\r\n            LobbyPanel.add(Refresh);\r\n            Container temp = PreGame.getContentPane();\r\n            temp.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n            temp.add(PlayerTypeField, BorderLayout.CENTER);\r\n            temp.add(Refresh, BorderLayout.PAGE_END);\r\n            temp.add(LobbyPanel, BorderLayout.PAGE_END);\r\n            temp.add(ControlButton, BorderLayout.PAGE_END);\r\n            PreGame.setResizable(false);\r\n            PreGame.setPreferredSize(new Dimension(350, 170));\r\n            PreGame.setBounds(700, 400, 350, 170);\r\n            PreGame.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\r\n            PreGame.pack();\r\n            PreGame.setVisible(true);\r\n        }\r\n\r\n        if (!isInLobby() && !isInGame()) {\r\n            connect.setEnabled(true);\r\n\r\n        }\r\n    }\r\n\r\n    public void InGame(Container container) {\r\n        JPanel controlPanel = (JPanel) container.getComponent(0);\r\n        JMenuBar jmenubar = (JMenuBar) controlPanel.getComponent(0);\r\n        JMenu jmenu = (JMenu) jmenubar.getComponent(0);\r\n        JMenuItem connect = (JMenuItem) jmenu.getItem(0);\r\n\r\n        //Ниже создаётся диалоговое окно для того чтоб загадать число противнику\r\n        //Вроде не нужно, но я не уверен\r\n        /*\r\n        JDialog MakeNumber = new JDialog();\r\n        MakeNumber.setTitle(\"Загадай число\");\r\n        MakeNumber.setModal(true);\r\n        MakeNumber.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\r\n        JTextArea numbercheckarea = new JTextArea(\"Загадай число от 1234 до 9876 без повторений цифр\");\r\n        numbercheckarea.setEditable(false);\r\n        TextField numbercheckfield = new TextField(\"\", 10);\r\n        JButton numbercheckbutton = new JButton(\"Загадать число\");\r\n\r\n        //Слушатель на кнопку Загадать число\r\n        numbercheckbutton.addActionListener(e -> {\r\n            int number;\r\n            try {\r\n                number = Integer.parseInt(numbercheckfield.getText());\r\n                if (number >= 1234) {\r\n                    if (number <= 9876) {\r\n                        int first = (int) number / 1000;\r\n                        int second = (int) ((number / 100) % 10);\r\n                        int third = (int) ((number / 10) % 10);\r\n                        int forth = number % 10;\r\n                        if (first != second && first != third && first != forth && second != third && second != forth && third != forth) {\r\n                            makeNumber(number);\r\n                            MakeNumber.dispose();\r\n                        } else throw new NumberFormatException();\r\n                    } else throw new NumberFormatException();\r\n                } else throw new NumberFormatException();\r\n            } catch (NumberFormatException nfe) {\r\n\r\n                JDialog error = new JDialog();\r\n                error.setTitle(\"Error\");\r\n                error.setModal(true);\r\n                error.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                JTextArea textArea = new JTextArea();\r\n                textArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                textArea.setText(\"Указанно неверное чилсло. Число должно быть в диапазоне от 1234 до 9876 и числа не должны повторяться\");\r\n                textArea.setEditable(false);\r\n                Container errorContentPane = error.getContentPane();\r\n                errorContentPane.add(textArea);\r\n                error.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                error.setResizable(false);\r\n                error.pack();\r\n                error.setVisible(true);\r\n            }\r\n        });\r\n\r\n        Container container2 = MakeNumber.getContentPane();\r\n        container2.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        container2.add(numbercheckarea);\r\n        container2.add(numbercheckfield);\r\n        container2.add(numbercheckbutton);\r\n        MakeNumber.setPreferredSize(new Dimension(390, 130));\r\n        MakeNumber.setBounds(700, 400, 100, 100);\r\n        MakeNumber.setResizable(false);\r\n        MakeNumber.pack();\r\n        MakeNumber.setVisible(true);\r\n\r\n         */\r\n\r\n        //Создание игрового поля\r\n        JPanel TheTable = new JPanel();\r\n        TheTable.update(getGraphics());\r\n        TheTable.revalidate();\r\n        TheTable.repaint();\r\n        jFrame.revalidate();\r\n        jFrame.repaint();\r\n\r\n        final int[] n = {1}; // счётчик для отправленных чисел\r\n\r\n        TheTable.setLayout(new GridLayout(3, 3, 5, 5));\r\n        JLabel Players = new JLabel(\"Игроки\");\r\n        JLabel Table = new JLabel(\"Стол\");\r\n        JLabel History = new JLabel(\"История\");\r\n\r\n        JTextArea CurrentDice = new JTextArea(\"\", 20, 10);\r\n        CurrentDice.setEditable(false);\r\n        CurrentDice.setFocusable(false);\r\n        CurrentDice.setLineWrap(true);\r\n        JScrollPane CurrentDicePane = new JScrollPane(CurrentDice);\r\n\r\n        String playersColorsAndDices = getPlayersColorsAndDices();\r\n\r\n        Vector<String[]> vectorColorsDices = new Vector<String[]>();\r\n        String[] s_playersColorsDices = playersColorsAndDices.split(\"\\\\%\");\r\n        for (int i = 0; i < s_playersColorsDices.length; i++){\r\n            vectorColorsDices.add(s_playersColorsDices[i].split(\"\\\\$\"));\r\n        }\r\n        String text_for_CurrentDice = \"\";\r\n        for (int i = 0; i < vectorColorsDices.size(); i++){\r\n            text_for_CurrentDice+=vectorColorsDices.get(i)[0] + \" - \" + vectorColorsDices.get(i)[1] + \"\\n\";\r\n        }\r\n        CurrentDice.setText(text_for_CurrentDice);\r\n\r\n\r\n        JLabel UrColor = new JLabel(\"Ваш цвет - \"+user.getColor());\r\n\r\n        JTextArea HistoryArea = new JTextArea(\"\", 20, 10);\r\n        HistoryArea.setEditable(false);\r\n        HistoryArea.setFocusable(false);\r\n        HistoryArea.setLineWrap(true);\r\n        JScrollPane HistoryAreaPane = new JScrollPane(HistoryArea);\r\n\r\n\r\n        JButton ExitGame = new JButton(\"Покинуть игру\");\r\n\r\n        JPanel Dices = new JPanel();\r\n        JLabel UrDice = new JLabel(\"Ваши кубики\");\r\n        JTextArea FirstDice = new JTextArea(\"\", 1, 1);\r\n        JTextArea SecondDice = new JTextArea(\"\", 1, 1);\r\n        JTextArea ThirdDice = new JTextArea(\"\", 1, 1);\r\n        JTextArea FourthDice = new JTextArea(\"\", 1, 1);\r\n        JTextArea FifthDice = new JTextArea(\"\", 1, 1);\r\n        FirstDice.setEditable(false);\r\n        FirstDice.setEditable(false);\r\n        SecondDice.setEditable(false);\r\n        SecondDice.setEditable(false);\r\n        ThirdDice.setEditable(false);\r\n        ThirdDice.setFocusable(false);\r\n        FourthDice.setFocusable(false);\r\n        FourthDice.setFocusable(false);\r\n        FifthDice.setFocusable(false);\r\n        FifthDice.setFocusable(false);\r\n        Dices.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        Dices.add(UrDice);\r\n        Dices.add(FirstDice);\r\n        Dices.add(SecondDice);\r\n        Dices.add(ThirdDice);\r\n        Dices.add(FourthDice);\r\n        Dices.add(FifthDice);\r\n\r\n        int myResult = getMyResult();\r\n        String myResultString = String.valueOf(myResult);\r\n        char[] myResultStringArray = myResultString.toCharArray();\r\n        JTextArea[] dicesAreas = {FirstDice, SecondDice, ThirdDice, FourthDice, FifthDice};\r\n        for (int i = 0; i<myResultString.length(); i++){\r\n            dicesAreas[i].setText(String.valueOf(myResultStringArray[i]));\r\n        }\r\n\r\n        JPanel ControlBet = new JPanel();\r\n        JPanel Bets = new JPanel();\r\n        String[] turn = getTurn();\r\n        String color = \"\";\r\n\r\n        if (turn[0].equals(user.getUuid())) {\r\n            color = \"Ваш ход\";\r\n        }else{\r\n            color = \"Ходит \" + turn[1];\r\n        }\r\n\r\n        JTextArea StatusArea = new JTextArea(color, 1, 10);\r\n        StatusArea.setEditable(false);\r\n        StatusArea.setFocusable(false);\r\n        JButton Perudo = new JButton(\"Блеф\");\r\n        TextField DiceValue = new TextField(\"\",1);    //Значение на кубике\r\n        TextField NumberOfDice = new TextField(\"\",1); //Количество кубиков\r\n        DiceValue.setEditable(true);\r\n        NumberOfDice.setEditable(true);\r\n        DiceValue.setFocusable(true);\r\n        NumberOfDice.setFocusable(true);\r\n        JButton SetBet = new JButton(\"Сделать ставку\");\r\n        SetBet.setEnabled(false);\r\n        JButton RefreshGame = new JButton(\"Обновить историю\");\r\n\r\n        //TODO разобраться почему не отлочивается ввод текста\r\n        if (color.equals(\"Ваш ход\")){\r\n            Bets.setEnabled(true);\r\n            DiceValue.setEditable(true);\r\n            NumberOfDice.setEditable(true);\r\n            SetBet.setEnabled(true);\r\n        }\r\n\r\n        Bets.setLayout(new FlowLayout(FlowLayout.TRAILING));\r\n        Bets.add(DiceValue);\r\n        Bets.add(NumberOfDice);\r\n        Bets.add(SetBet);\r\n\r\n        ControlBet.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        ControlBet.add(StatusArea);\r\n        ControlBet.add(RefreshGame);\r\n        ControlBet.add(Perudo);\r\n        ControlBet.add(Bets);\r\n\r\n        TheTable.add(Players);\r\n        TheTable.add(Table);\r\n        TheTable.add(History);\r\n        TheTable.add(CurrentDicePane);\r\n        TheTable.add(UrColor);\r\n        TheTable.add(HistoryAreaPane);\r\n        TheTable.add(ExitGame);\r\n        TheTable.add(Dices);\r\n        TheTable.add(ControlBet);\r\n\r\n        //Слушатели кнопок\r\n        ExitGame.addActionListener(e -> {\r\n            JDialog ExitDialog = new JDialog();\r\n            ExitDialog.setTitle(\"Выход из игры\");\r\n            ExitDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\r\n            ExitDialog.setModal(true);\r\n            JTextArea textArea = new JTextArea();\r\n            textArea.setFont(new Font(\"TimesRoman\", Font.BOLD, 14));\r\n            textArea.setText(\"Вы уверены, что хотите покинуть игру?\");\r\n            textArea.setEditable(false);\r\n            JButton OK = new JButton(\"Да\");\r\n            JButton cancel = new JButton(\"Отмена\");\r\n\r\n            OK.addActionListener(ex -> {\r\n                StatusArea.setText(\"Вы покинули игру\");\r\n                connect.setEnabled(true);\r\n                TheTable.removeAll();\r\n                container.remove(1);\r\n                jFrame.revalidate();\r\n                jFrame.requestFocus();\r\n                jFrame.pack();\r\n                ExitDialog.dispose();\r\n                imOutOfGame();\r\n                tryToDeleteGame();\r\n            });\r\n\r\n            cancel.addActionListener(ex -> {\r\n                ExitDialog.dispose();\r\n            });\r\n\r\n            JPanel panel = new JPanel();\r\n            panel.add(OK);\r\n            panel.add(cancel);\r\n            Container container1 = ExitDialog.getContentPane();\r\n            container1.add(textArea);\r\n            container1.add(panel);\r\n            ExitDialog.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n            ExitDialog.pack();\r\n            ExitDialog.setVisible(true);\r\n        });\r\n\r\n        RefreshGame.addActionListener(e -> {\r\n            //TODO обновление истории и панели статуса (ЧЕКНУТЬ НА РАБОТОСПОСОБНОСТЬ)\r\n            //TODO обновление кол-ва кубиков у остальных игроков и своих кубиков (ВАЖНО)\r\n            Vector<String[]> history = getHistory();\r\n            String text = \"\";\r\n            if (!history.get(0)[0].equals(\"\")){\r\n                for (int i = 0; i < history.size(); i++){\r\n                    String[] s = history.get(i);\r\n                    text+= \"Игрок \"+ s[3] + \" делает ставку: \" + s[1]+ \" номиналом \"+ s[2] + \"\\n\";\r\n                }\r\n            } else{\r\n                text = \"\";\r\n            }\r\n            HistoryArea.setText(text);\r\n\r\n            String[] turn2 = getTurn();\r\n            String color2 = \"\";\r\n            if (turn2[0].equals(user.getUuid())) {\r\n                color2 = \"Ваш ход\";\r\n                Bets.setEnabled(true);\r\n                SetBet.setEnabled(true);\r\n                DiceValue.setEditable(true);\r\n                DiceValue.setFocusable(false);\r\n                NumberOfDice.setEditable(true);\r\n                NumberOfDice.setFocusable(false);\r\n                Bets.revalidate();\r\n\r\n            }else{\r\n                color2 = \"Ходит \" + turn2[1];\r\n                Bets.setEnabled(false);\r\n                SetBet.setEnabled(false);\r\n                DiceValue.setEditable(false);\r\n                NumberOfDice.setEditable(false);\r\n                Bets.revalidate();\r\n            }\r\n            StatusArea.setText(color2);\r\n            String playersColorsAndDices2 = getPlayersColorsAndDices();\r\n            Vector<String[]> vectorColorsDices2 = new Vector<String[]>();\r\n            String[] s_playersColorsDices2 = playersColorsAndDices2.split(\"\\\\%\");\r\n            for (int i = 0; i < s_playersColorsDices2.length; i++){\r\n                vectorColorsDices2.add(s_playersColorsDices2[i].split(\"\\\\$\"));\r\n            }\r\n            String text_for_CurrentDice2 = \"\";\r\n            for (int i = 0; i < vectorColorsDices2.size(); i++){\r\n                text_for_CurrentDice2+=vectorColorsDices2.get(i)[0] + \" - \" + vectorColorsDices2.get(i)[1] + \"\\n\";\r\n            }\r\n            CurrentDice.setText(text_for_CurrentDice2);\r\n        });\r\n\r\n        Perudo.addActionListener(e -> {\r\n            //TODO Посылает запрос на сервер и проверяет последнюю ставку на блеф\r\n            //TODO Сделать проверку на победил ставку или проиграл\r\n\r\n            //if(победа){\r\n            HistoryArea.setText(HistoryArea.getText() + n[0] + \") \" + \" Игрок\" + \"(Вот тут добавить цвет игрока)\" + \"\\n\" + \" оспорил ставку предыдущего игрока и выиграл\" + \"\\n\" + \"------------------\" + \"\\n\" + \"Начинается новый раунд\" + \"\\n\");\r\n            //У предыдущего игрока отниматся кубик, все кубики перебрасываются. Раунд начинает игрок оспоривший ставку\r\n            FirstDice.setText(\"Значение первого кубика\");\r\n            SecondDice.setText(\"Значение второго кубика\");\r\n            ThirdDice.setText(\"Значение третьего кубика\");\r\n            FourthDice.setText(\"Значение четвертого кубика\");\r\n            FifthDice.setText(\"Значение пятого кубика\");\r\n\r\n//                }\r\n\r\n\r\n            //if(проигрыш){\r\n            HistoryArea.setText(HistoryArea.getText() + n[0] + \") \" + \" Игрок(Вот тут добавить цвет игрока\" + \"\\n\" + \"оспорил ставку предыдущего игрока и проиграл\" + \"\\n\" + \"------------------\" + \"\\n\" + \"Начинается новый раунд\" + \"\\n\");\r\n            //У проверяющего игрока отнимается кубик, он начинает новый раунд\r\n            FirstDice.setText(\"Значение первого кубика\");\r\n            SecondDice.setText(\"Значение второго кубика\");\r\n            ThirdDice.setText(\"Значение третьего кубика\");\r\n            FourthDice.setText(\"Значение четвертого кубика\");\r\n            FifthDice.setText(\"Значение пятого кубика\");\r\n//        }\r\n            n[0] = n[0] + 1;\r\n\r\n            //if(проверка на количество кубиков у других игроков, если у кого-то есть один, вывод сообщения в чат){\r\n            HistoryArea.setText(HistoryArea.getText() + \"Игра завершена \\n Поздравляем \" + \"(Цвет игрока)\" + \" с победой\");\r\n            StatusArea.setText(\"(Цвет игрока)\" + \"Победил\");\r\n            RefreshGame.setEnabled(false);\r\n            Perudo.setEnabled(false);\r\n            SetBet.setEnabled(false);\r\n            DiceValue.setEditable(false);\r\n            NumberOfDice.setEditable(false);\r\n//        }\r\n            clearHistory();\r\n        });\r\n\r\n        SetBet.addActionListener(e -> {\r\n            setBet(NumberOfDice.getText(), DiceValue.getText());\r\n            /*\r\n            //Проверка на ставку Джокер или обычная кость\r\n            //TODO отправка значений на сервер\r\n            if(Integer.parseInt(DiceValue.getText()) == значение предыдущей ставки){\r\n                if(NumberOfDice.getText() > количество предыдущей ставки){\r\n                    //Отправка ставки на сервер\r\n                }else{\r\n                    //Окно ошибки, что значение должно быть больше предыдущей ставки\r\n                }\r\n            }else{\r\n                if (Предыдущая ставка == 1) {\r\n                    if(NumberOfDice.getText() >= (int)(количество предыдущей ставки*2 + 1){\r\n                        //Отправка ставки на сервер\r\n                    }else{\r\n                        //Окно ошибки, что значение должно быть больше предыдущей в два раза + 1\r\n                    }\r\n                } else {\r\n                    if (Integer.parseInt(DiceValue.getText()) == 1){\r\n                        if (NumberOfDice.getText() >= (количество предыдущей ставки/2 + 0.5)){\r\n                            //Отправка ставки на сервер\r\n                        }else{\r\n                            //Окно ошибки, что значение должно быть больше половины c округлением в большую сторону\r\n                        }\r\n                    } else{\r\n                        if (NumberOfDice.getText() >=  количество предыдущей ставки){\r\n                            //Отправка ставки на сервер\r\n                        }else{\r\n                            //Окно ошибки, что значение должно быть больше предыдущей ставки\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n             */\r\n        });\r\n\r\n\r\n        jFrame.revalidate();\r\n        jFrame.add(TheTable);\r\n        jFrame.requestFocus();\r\n        jFrame.pack();\r\n\r\n\r\n        //Кнопки и обработка Быков и коров\r\n        /*\r\n        JTextArea AnswerAttempts = new JTextArea(10, 30);\r\n        AnswerAttempts.setText(\"\");\r\n        AnswerAttempts.setFont(new Font(\"TimesRoman\", Font.ITALIC, 14));\r\n        AnswerAttempts.setLineWrap(true);\r\n        AnswerAttempts.setEditable(false);\r\n\r\n        JTextArea EnemyAnswer = new JTextArea(10, 30);\r\n        EnemyAnswer.setText(\"\");\r\n        EnemyAnswer.setFont(new Font(\"TimesRoman\", Font.ITALIC, 14));\r\n        EnemyAnswer.setLineWrap(true);\r\n        EnemyAnswer.setEditable(false);\r\n\r\n        JPanel GroupButtons = new JPanel();\r\n        JButton EnemyCheck = new JButton(\"Показать результат противника\");\r\n        JButton ExitFromGame = new JButton(\"Покинуть игру\");\r\n        ExitFromGame.setFocusable(false);\r\n        ExitFromGame.setEnabled(true);\r\n        EnemyCheck.setFocusable(false);\r\n        EnemyCheck.setEnabled(true);\r\n        GroupButtons.add(EnemyCheck);\r\n        GroupButtons.add(ExitFromGame);\r\n        GroupButtons.setEnabled(true);\r\n\r\n        EnemyCheck.addActionListener(e -> {\r\n            boolean finished = isEnemyFinished();\r\n            boolean ingame = isEnemyInGame();\r\n            if (finished){\r\n                EnemyAnswer.setText(\"Противник угадал твоё число за \" + getEnemyResult() + \" ходов\");\r\n            }\r\n            else if (!finished && !ingame){\r\n                EnemyAnswer.setText(\"Противник не смог справится с твоим числом и покинул игру.\");\r\n            } else if (!finished && ingame){\r\n                EnemyAnswer.setText(\"Противник еще отгадывает твое число.\");\r\n            }\r\n        });\r\n\r\n\r\n        JTextArea NumberAttempts = new JTextArea(10, 30);\r\n        NumberAttempts.setText(\"\");\r\n        NumberAttempts.setFont(new Font(\"TimesRoman\", Font.ITALIC, 14));\r\n        NumberAttempts.setLineWrap(true);\r\n        NumberAttempts.setEditable(false);\r\n\r\n        JScrollPane jScrollPane = new JScrollPane(NumberAttempts);\r\n        jScrollPane.setEnabled(true);\r\n        JScrollPane jScrollPane1 = new JScrollPane(AnswerAttempts);\r\n        jScrollPane1.setEnabled(true);\r\n\r\n        TextField Numbers = new TextField(\"\", 30);\r\n        Numbers.setText(\"\");\r\n        Numbers.setEditable(true);\r\n        Numbers.setEnabled(true);\r\n\r\n        JButton NumberChecker = new JButton(\"Отправить число\");\r\n        NumberChecker.setFocusable(false);\r\n        NumberChecker.setEnabled(true);\r\n\r\n        final int[] n = {1}; // счётчик для отправленных чисел\r\n\r\n        NumberChecker.addActionListener(e -> {\r\n            int number;\r\n            try {\r\n                if (haveaNumber()){\r\n                    number = Integer.parseInt(Numbers.getText());\r\n\r\n                    if (number >= 1234) {\r\n                        if (number <= 9876) {\r\n                            int first = (int) number / 1000;\r\n                            int second = (int) ((number / 100) % 10);\r\n                            int third = (int) ((number / 10) % 10);\r\n                            int forth = number % 10;\r\n                            if (first != second && first != third && first != forth && second != third && second != forth && third != forth) {\r\n                                String ans = trytoGuess(number);\r\n                                AnswerAttempts.setText(AnswerAttempts.getText() + n[0] + \") \" + ans + \"\\n\");\r\n                                NumberAttempts.setText(NumberAttempts.getText() + n[0] + \") \" + Numbers.getText() + \"\\n\");\r\n                                Numbers.setText(\"\");\r\n                                if(ans.equals(\"ББББ\")){\r\n                                    imFinished();\r\n                                    if(n[0]%10==1){\r\n                                        NumberAttempts.setText(NumberAttempts.getText() + \"\\n\" +\"Поздравляем, ты отгадал число за: \" + n[0] + \" попытку\" );\r\n                                        NumberChecker.setEnabled(false);\r\n                                        Numbers.setEditable(false);\r\n\r\n                                    }\r\n                                    if(n[0]%10==2 || n[0]%10==3 || n[0]%10==4){\r\n                                        NumberAttempts.setText(NumberAttempts.getText() + \"\\n\" +\"Поздравляем, ты отгадал число за: \" + n[0] + \" попытки\" );\r\n                                        NumberChecker.setEnabled(false);\r\n                                        Numbers.setEditable(false);\r\n                                    }\r\n                                    if(n[0]%10>5){\r\n                                        NumberAttempts.setText(NumberAttempts.getText() + \"\\n\" +\"Поздравляем, ты отгадал число за: \" + n[0] + \" попыток\" );\r\n                                        NumberChecker.setEnabled(false);\r\n                                        Numbers.setEditable(false);\r\n                                    }\r\n                                }\r\n                                n[0] = n[0] + 1;\r\n                            } else throw new NumberFormatException();\r\n                        } else throw new NumberFormatException();\r\n                    } else throw new NumberFormatException();\r\n                } else {\r\n                    JDialog error = new JDialog();\r\n                    error.setTitle(\"Ошибка\");\r\n                    error.setModal(true);\r\n                    error.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                    JTextArea textArea = new JTextArea();\r\n                    textArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                    textArea.setText(\"Пожалуйста, дождитесь пока противник загадает вам число.\");\r\n                    Numbers.setText(\"\");\r\n                    textArea.setEditable(false);\r\n                    Container errorContentPane = error.getContentPane();\r\n                    errorContentPane.add(textArea);\r\n                    error.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                    error.setResizable(false);\r\n                    error.pack();\r\n                    error.setVisible(true);\r\n                }\r\n            } catch (NumberFormatException nfe) {\r\n\r\n                JDialog error = new JDialog();\r\n                error.setTitle(\"Error\");\r\n                error.setModal(true);\r\n                error.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\r\n                JTextArea textArea = new JTextArea();\r\n                textArea.setFont(new Font(\"TimesRoman\", Font.ITALIC, 30));\r\n                textArea.setText(\"Указанно неверное чилсло. Число должно быть в диапазоне от 1234 до 9876 и числа не должны повторяться\");\r\n                textArea.setEditable(false);\r\n                Container errorContentPane = error.getContentPane();\r\n                errorContentPane.add(textArea);\r\n                error.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n                error.setResizable(false);\r\n                error.pack();\r\n                error.setVisible(true);\r\n            }\r\n\r\n        });\r\n\r\n        ExitFromGame.addActionListener(e -> {\r\n            JDialog ExitDialog = new JDialog();\r\n            ExitDialog.setTitle(\"Выход из игры\");\r\n            ExitDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\r\n            ExitDialog.setModal(true);\r\n            JTextArea textArea = new JTextArea();\r\n            textArea.setFont(new Font(\"TimesRoman\", Font.BOLD, 14));\r\n            textArea.setText(\"Вы уверены, что хотите покинуть игру?\");\r\n            textArea.setEditable(false);\r\n            JButton OK = new JButton(\"Да\");\r\n            JButton cancel = new JButton(\"Отмена\");\r\n\r\n            OK.addActionListener(ex -> {\r\n                Numbers.setText(\"Вы покинули игру\");\r\n                connect.setEnabled(true);\r\n                TheTable.removeAll();\r\n                container.remove(1);\r\n                jFrame.revalidate();\r\n                jFrame.requestFocus();\r\n                jFrame.pack();\r\n                ExitDialog.dispose();\r\n                imOutOfGame();\r\n                tryToDeleteGame();\r\n            });\r\n\r\n            cancel.addActionListener(ex ->{\r\n                ExitDialog.dispose();\r\n            });\r\n\r\n            JPanel panel = new JPanel();\r\n            panel.add(OK);\r\n            panel.add(cancel);\r\n            Container container1 = ExitDialog.getContentPane();\r\n            container1.add(textArea);\r\n            container1.add(panel);\r\n            ExitDialog.setBounds(width - width / 2 - 100, height - height / 2 + 90, width, height);\r\n            ExitDialog.pack();\r\n            ExitDialog.setVisible(true);\r\n        });\r\n\r\n        TheTable.add(Attemts);\r\n        TheTable.add(Answer);\r\n        TheTable.add(jScrollPane);\r\n        TheTable.add(jScrollPane1);\r\n        TheTable.add(Numbers);\r\n        TheTable.add(EnemyAnswer);\r\n        TheTable.add(NumberChecker);\r\n        TheTable.add(GroupButtons);\r\n        TheTable.revalidate();\r\n        TheTable.update(getGraphics());\r\n        TheTable.setVisible(true);\r\n        jFrame.revalidate();\r\n        jFrame.add(TheTable);\r\n        jFrame.requestFocus();\r\n        jFrame.pack();\r\n\r\n    }\r\n\r\n         */\r\n\r\n    }\r\n\r\n\r\n    public void enterLobby(){\r\n        try {\r\n            out.writeObject(\"enterLobby:\");\r\n            UUID uuid = UUID.randomUUID();\r\n            out.writeObject(String.valueOf(uuid));\r\n            String s = null;\r\n            s = String.valueOf(in.readObject());\r\n            System.out.println(s);\r\n            user = new User(String.valueOf(uuid));\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    public void leaveLobby() {\r\n        try {\r\n            out.writeObject(\"leaveLobby:\");\r\n            out.writeObject(user.getUuid());\r\n            String s = String.valueOf(in.readObject());\r\n            System.out.println(s);\r\n\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void readyToGame() {\r\n        try {\r\n            out.writeObject(\"readytogame:\");\r\n            out.writeObject(String.valueOf(user.getUuid()));\r\n            String s = String.valueOf(in.readObject());\r\n            System.out.println(s);\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void notReadyToGame() {\r\n        try {\r\n            out.writeObject(\"notreadytogame:\");\r\n            out.writeObject(user.getUuid());\r\n            String s = String.valueOf(in.readObject());\r\n            System.out.println(s);\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public int getLobbyNumber() {\r\n        try {\r\n            out.writeObject(\"getlobbynumber:\");\r\n            int number = Integer.parseInt(String.valueOf(in.readObject()));\r\n            System.out.println(number);\r\n            return number;\r\n\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public int getReadyNumber() {\r\n        try {\r\n            out.writeObject(\"getreadynumber:\");\r\n            int number = Integer.parseInt(String.valueOf(in.readObject()));\r\n            System.out.println(number);\r\n            return number;\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public boolean isInLobby() {\r\n        try {\r\n            out.writeObject(\"isinlobby:\");\r\n            out.writeObject(user.getUuid());\r\n            String s = String.valueOf(in.readObject());\r\n            System.out.println(s);\r\n            //System.out.println(isin);\r\n            return Boolean.parseBoolean(s);\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean isInReady() {\r\n        try {\r\n            out.writeObject(\"isinready:\");\r\n            out.writeObject(user.getUuid());\r\n            boolean isin = Boolean.parseBoolean(String.valueOf(in.readObject()));\r\n            System.out.println(isin);\r\n            return isin;\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public String getGameId() {\r\n        try {\r\n            out.writeObject(\"getgameid:\");\r\n            out.writeObject(user.getUuid());\r\n            String gameId = String.valueOf(in.readObject());\r\n            System.out.println(gameId);\r\n            return gameId;\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public void makeNumber(int number) {\r\n        try {\r\n            out.writeObject(\"makenumber:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId() + \"$\" + String.valueOf(number));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public boolean haveaNumber() {\r\n        try {\r\n            out.writeObject(\"haveanumber:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n            return Boolean.parseBoolean(String.valueOf(in.readObject()));\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public String trytoGuess(int number) {\r\n        String ans = null;\r\n        try {\r\n            out.writeObject(\"trytoguess:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId() + \"$\" + String.valueOf(number));\r\n            ans = String.valueOf(in.readObject());\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ans;\r\n\r\n    }\r\n\r\n    public boolean isEnemyFinished() {\r\n        try {\r\n            out.writeObject(\"isenemyfinished:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n            return Boolean.parseBoolean(String.valueOf(in.readObject()));\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public void imFinished() {\r\n        try {\r\n            out.writeObject(\"imfinished:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public boolean isEnemyInGame() {\r\n        try {\r\n            out.writeObject(\"isenemyingame:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n            return Boolean.parseBoolean(String.valueOf(in.readObject()));\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public int getEnemyResult() {\r\n        try {\r\n            out.writeObject(\"getenemyresult:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n            return Integer.parseInt(String.valueOf(in.readObject()));\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return 100;\r\n        }\r\n    }\r\n\r\n    public void imOutOfGame() {\r\n        try {\r\n            out.writeObject(\"imoutofgame:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    public void tryToDeleteGame() {\r\n        try {\r\n            out.writeObject(\"trytodeletegame:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public boolean isInGame(){\r\n        try {\r\n            out.writeObject(\"isingame:\");\r\n            out.writeObject(user.getUuid());\r\n            return Boolean.parseBoolean(String.valueOf(in.readObject()));\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    public void createGame(){\r\n        try {\r\n            out.writeObject(\"createGame:\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public Vector<String[]> getHistory(){\r\n        try {\r\n            out.writeObject(\"gethistory:\");\r\n            out.writeObject(user.getGameId());\r\n            String inp = String.valueOf(in.readObject());\r\n            Vector<String[]> ss = new Vector<String[]>();\r\n            if (!inp.equals(\"\")){\r\n                String[] s = inp.split(\"\\\\%\");\r\n                for (int i = 0; i < s.length; i++){\r\n                    ss.add(s[i].split(\"\\\\&\"));\r\n                }\r\n                return ss;\r\n            } else{\r\n                String[] s = {\"\"};\r\n                ss.add(s);\r\n                return ss;\r\n            }\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public void clearHistory(){\r\n        try {\r\n            out.writeObject(\"clearhistory:\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public String[] getTurn(){\r\n        try {\r\n            out.writeObject(\"getTurn:\");\r\n            out.writeObject(user.getGameId());\r\n            return String.valueOf(in.readObject()).split(\"\\\\$\");\r\n\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //TODO смена хода (куда-нить вхуярить)\r\n    public void changeTurn(){\r\n        try {\r\n            out.writeObject(\"changeTurn:\");\r\n            out.writeObject(user.getGameId());\r\n        } catch (IOException  e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public String getMyColor(){\r\n        try {\r\n            out.writeObject(\"getmycolor:\");\r\n            out.writeObject(user.getUuid()+\"$\"+user.getGameId());\r\n            return String.valueOf(in.readObject());\r\n\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public String getPlayersColorsAndDices(){\r\n        try {\r\n            out.writeObject(\"getplayerscolorsanddices:\");\r\n            out.writeObject(user.getGameId());\r\n            return String.valueOf(in.readObject());\r\n\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public int getMyResult(){\r\n        try {\r\n            out.writeObject(\"getmyresult:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId());\r\n            return Integer.parseInt(String.valueOf(in.readObject()));\r\n\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public void setBet(String dice, String value){\r\n        try {\r\n            out.writeObject(\"setbet:\");\r\n            out.writeObject(user.getUuid() + \"$\" + user.getGameId()+\"$\" + dice + \"$\" + value);\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    //TODO функция для ставки\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Window.java	(revision 00699b93199d8f05653d7a9786c553ee808091fc)
+++ src/Window.java	(date 1591379810116)
@@ -446,6 +446,7 @@
         TheTable.add(History);
         TheTable.add(CurrentDicePane);
         TheTable.add(UrColor);
+        TheTable.add(UrColor);
         TheTable.add(HistoryAreaPane);
         TheTable.add(ExitGame);
         TheTable.add(Dices);
